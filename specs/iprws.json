{
  "swagger": "2.0",
  "info": {
    "version": "1.16",
    "title": "IPR web services documentation",
    "contact": {},
    "license": {
      "name": "Pakeitimų istorija | Release notes",
      "url": "https://iprws.esveikata.lt/templates/release_notes.html"
    }
  },
  "host": "iprws.esveikata.lt",
  "basePath": "/",
  "tags": [
    {
      "name": "Appointment",
      "description": "Registracijos REST API | Appointment REST API"
    },
    {
      "name": "Appointment state reason",
      "description": "Vizito būsenos priežasties REST API | Appointment state reason REST API"
    },
    {
      "name": "CancerPreventionProgram",
      "description": "Vėžio prevencinės programos REST API | Cancer prevention program REST api"
    },
    {
      "name": "Document type",
      "description": "Dokumentų tipo REST API | Document type REST API"
    },
    {
      "name": "Medical service",
      "description": "Sveikatos paslaugos REST API | Medical service REST API"
    },
    {
      "name": "Organization",
      "description": "Įstaigos REST API | Organization REST API"
    },
    {
      "name": "Partner",
      "description": "Partnerio REST API | Partner REST API"
    },
    {
      "name": "Patient",
      "description": "Paciento REST API | Patient REST API"
    },
    {
      "name": "Practitioner",
      "description": "Specialisto REST API | Specialist REST API"
    },
    {
      "name": "Practitioner roles",
      "description": "Specialisto rolių REST API | Practitioner role REST API"
    },
    {
      "name": "Queue",
      "description": "Eilės REST API | Queue REST API"
    },
    {
      "name": "Reception",
      "description": "Registratūros REST API | Reception REST API"
    },
    {
      "name": "Reception parameter",
      "description": "Registratūros parametro REST API | Reception parameter REST API"
    },
    {
      "name": "Referral",
      "description": "Siuntimo REST API | Referral REST API"
    },
    {
      "name": "Room",
      "description": "Registratūros kabinetų REST API | Reception rooms REST API"
    },
    {
      "name": "Slot",
      "description": "Talono REST API | Slot REST API"
    },
    {
      "name": "Slot generation",
      "description": "Slot Generation Controller"
    },
    {
      "name": "Slot offer",
      "description": "Pasiūlymo talonui REST API | Slot offer REST API"
    },
    {
      "name": "Slot type",
      "description": "Talonų tipo REST API | Slot type REST API"
    },
    {
      "name": "Speciality",
      "description": "Kvalifikacijos REST API | Speciality REST API"
    },
    {
      "name": "Workplace",
      "description": "Darbo vietos REST API | Workplace REST API"
    }
  ],
  "paths": {
    "/v1/appointmentStates/reasons": {
      "get": {
        "tags": [
          "Appointment state reason"
        ],
        "summary": "Gauti vizito būsenos priežastis | Retrieve a list of appointment state reasons",
        "operationId": "getAppointmentStateReasonsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppointmentStateReason"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/appointmentStates/reasons/{type}": {
      "get": {
        "tags": [
          "Appointment state reason"
        ],
        "summary": "Gauti vizito būsenos priežastis pagal tipą | Retrieve a list of appointment state reasons by type",
        "description": "### Tipų paaiškinimai\n* REGISTRACIJOS_PATVIRTINIMAS - būsenos pasikeitimas patvirtinus registraciją.\n* REGISTRACIJOS_ATMETIMAS - būsenos pasikeitimas atmetus registraciją.\n* TALONO_PRISKYRIMAS - būsenos pasikeitimas priskyrus taloną.\n* TALONAS_ATMESTAS_ISTAIGOS - būsenos pasikeitimas įstaigai atmetus taloną.\n* SIULOMO_LAIKO_ATSISAKYMAS - būsenos pasikeitimas atmetus siūlomą laiką.\n* ATMESTA_PACIENTO - būsenos pasikeitimas pacientui atmetus vizitą.\n* REGISTRACIJA_EILEJE - būsenos pasikeitimas registruojant į eilę.\n\n\n### Type explanations\n* REGISTRACIJOS_PATVIRTINIMAS - state change after confirming registration.\n* REGISTRACIJOS_ATMETIMAS - state change after canceling registration.\n* TALONO_PRISKYRIMAS - state change after assigning slot.\n* TALONAS_ATMESTAS_ISTAIGOS - state change after organization declining slot.\n* SIULOMO_LAIKO_ATSISAKYMAS - state change after declining suggested time.\n* ATMESTA_PACIENTO - state change after patient canceling appointment.\n* REGISTRACIJA_EILEJE - state change after registering in queue.\n",
        "operationId": "getAppointmentStateReasonsByTypeUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "type",
            "in": "path",
            "description": "Būsenos pasikeitimo tipas | State change type",
            "required": true,
            "type": "string",
            "enum": [
              "ATMESTA_PACIENTO",
              "REGISTRACIJA_EILEJE",
              "REGISTRACIJOS_ATMETIMAS",
              "REGISTRACIJOS_PATVIRTINIMAS",
              "SIULOMO_LAIKO_ATSISAKYMAS",
              "TALONAS_ATMESTAS_ISTAIGOS",
              "TALONO_PRISKYRIMAS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppointmentStateReason"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/appointments/wouldCancel": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Gauti būsimai atšauktas paciento registracijas | Get would be cancelled patient appointments",
        "description": "Grąžina sąrašą registracijų, kurios bus atšauktos registruojant pacientą į taloną paslaugai | Return a list of appointments which will be cancelled after registering patient to slot for a service",
        "operationId": "getWouldBeCancelledAppointmentsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "healthcareServiceCode",
            "in": "query",
            "description": "Sveikatos paslaugos kodas | Healthcare service code",
            "required": true,
            "type": "string"
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "Paciento identifikatorius | patient identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005928505
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "query",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatientAppointment"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Gauti registraciją | Get appointment",
        "operationId": "getAppointmentUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "string",
            "x-example": "2114"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Kuriuos objektus papildomai grąžinti (įrašyti objektų pavadinimus atskirtus kableliais)\nPrasmingos reikšmės: referral |\nWhich object to also return (input object names separated by commas)\nValid objects: referral",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/cancerPrevention/appointments": {
      "get": {
        "tags": [
          "CancerPreventionProgram"
        ],
        "summary": "Gauti programos registracijas | Get program appointments",
        "operationId": "getProgramAppointmentsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "iprOrganizationId",
            "in": "query",
            "description": "IPR Įstaigos Id | IPR Organization Id",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 34
          },
          {
            "name": "medicalServiceCode",
            "in": "query",
            "description": "Sveikatos paslaugos kodas | Medical service code",
            "required": false,
            "type": "string",
            "x-example": "2195"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "Paciento identifikatorius | patient identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1005928505
          },
          {
            "name": "receptionId",
            "in": "query",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "registrationStatus",
            "in": "query",
            "description": "Registracijos būsenaGalimos reikšmės:\n* null - grąžinamos registracijos su bet kokia būsena\n* Registered - registruota\n* Cancelled - atšaukta\n\n\nAppointment status\nAllowed values:\n* null - appointments with any status are returned\n* Registered\n* Cancelled\n",
            "required": false,
            "type": "string",
            "enum": [
              "Cancelled",
              "Registered"
            ]
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "slotDateFrom",
            "in": "query",
            "description": "Datos intervalo pradžia, į kurį turi patekti talono laikas | The start of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2018-12-24 10:00:00"
          },
          {
            "name": "slotDateTo",
            "in": "query",
            "description": "Datos intervalo pabaiga, į kurį turi patekti talono laikas | The end of the date range to which the appointment must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2018-12-30 19:00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfProgramAppointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "CancerPreventionProgram"
        ],
        "summary": "Sukurti programos registraciją | Create program appointment",
        "description": "## Reikalavimai | Requirements\n### Paslaugos | Medical services\n1. <span>Vienai paslaugai galima registruoti tik vieną kartą. Jeigu paslauga jau turi registraciją ir jai yra kuriamos naujos registracijos, bus paliekama pati paskutinė registracija, o visos kitos atšaukiamos.</span> A service can have no more than one appointment only. If a service already has an appointment and more appointments are created for this service, the last one will be considered valid and all previous appointments will be cancelled.\n",
        "operationId": "createProgramAppointmentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "in": "body",
            "name": "programAppointmentCreationRequest",
            "description": "Programos registracijos sukūrimo užklausa | Program appointment creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProgramAppointmentCreationRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/cancerPrevention/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "CancerPreventionProgram"
        ],
        "summary": "Gauti programos registraciją | Get program appointment",
        "operationId": "getProgramAppointmentUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 2114
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "CancerPreventionProgram"
        ],
        "summary": "Atšaukti programos registraciją | Cancel program appointment",
        "description": "Atšauktos registracijos vidinis id (cid) yra ištrinamas | The internal id (cid) of the cancelled appointment is deleted",
        "operationId": "cancelProgramAppointmentUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cancellationReasonCode",
            "in": "query",
            "description": "Registracijos atšaukimo priežasties identifikatorius\nIš registracijos būsenos priežasčių API reikia pasiimti atitinkamus priežasčių kodus.\nGalimi priežasties identifikatoriaus tipai:\n* ATMESTA_PACIENTO - atšaukia pacientas\n* TALONAS_ATMESTAS_ISTAIGOS - atšaukia įstaiga\n\n\nAppointment cancellation reason identifier\nThe appointment state reasons API should be used to get respective cancellation reason codes.\nAllowed reason identifier types:\n* ATMESTA_PACIENTO - cancelled by patient\n* TALONAS_ATMESTAS_ISTAIGOS - cancelled by organization\n",
            "required": true,
            "type": "string",
            "x-example": "RIPSR"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/cancerPrevention/slots": {
      "get": {
        "tags": [
          "CancerPreventionProgram"
        ],
        "summary": "Ieškoti laisvų programos talonų | Search for free program slots",
        "operationId": "searchSlotsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "endsTill",
            "in": "query",
            "description": "Datos intervalo pabaiga, į kurį turi patekti numatytas talono laikas | The end of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-05-07"
          },
          {
            "name": "medicalServiceCode",
            "in": "query",
            "description": "Sveikatos paslaugos kodas | Medical service code",
            "required": false,
            "type": "string",
            "x-example": "2195"
          },
          {
            "name": "municipalityId",
            "in": "query",
            "description": "Savivaldybės identifikatorius iš Adresų registro | Municipality identifier from the Address Register",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 461
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos identifikatorius | Organization identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1000139194
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1002614698
          },
          {
            "name": "receptionId",
            "in": "query",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "startsFrom",
            "in": "query",
            "description": "Datos intervalo pradžia, į kurį turi patekti numatytas talono laikas | The start of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-05-06"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfProgramSlot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/cancerPrevention/slots/{slotId}/reservations": {
      "patch": {
        "tags": [
          "CancerPreventionProgram"
        ],
        "summary": "Rezervuoti programos taloną | Reserve program slot",
        "operationId": "reserveSlotUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "reservationPeriod",
            "in": "query",
            "description": "Rezervavimo laikas sekundėmis | Reservation time in seconds",
            "required": false,
            "type": "integer",
            "default": 300,
            "format": "int64"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/documentTypes": {
      "get": {
        "tags": [
          "Document type"
        ],
        "summary": "Gauti dokumentų tipus | Retrieve a list of document types",
        "operationId": "getDocumentTypesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentType"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/medicalServices": {
      "get": {
        "tags": [
          "Medical service"
        ],
        "summary": "Gauti sveikatos paslaugas | Get medical services",
        "operationId": "getMedicalServicesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "onlyChangesMadeAfter",
            "in": "query",
            "description": "Data. Jei paduota gražinamos tik tos paslaugas, kurios buvo atnaujintos nuo tos datos, o ne visą klasifikatorių | If given returns medical services that have been updated since that date and not the whole classifier",
            "required": false,
            "type": "string",
            "format": "date",
            "x-example": "2019-09-20"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfMedicalService"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/medicalServices/{medicalServiceCode}": {
      "get": {
        "tags": [
          "Medical service"
        ],
        "summary": "Gauti konkrečią sveikatos paslaugą | Get specific medical service",
        "operationId": "getMedicalServiceUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceCode",
            "in": "path",
            "description": "Medicinines paslaugos kodas | Medical service code",
            "required": true,
            "type": "string",
            "x-example": "2195"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MedicalService"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/medicalServices/{medicalServiceCode}/agePeriods": {
      "get": {
        "tags": [
          "Medical service"
        ],
        "summary": "Gauti amžių intervalus | Get age periods",
        "operationId": "getAgePeriodsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceCode",
            "in": "path",
            "description": "Medicinines paslaugos kodas | Medical service code",
            "required": true,
            "type": "string",
            "x-example": "2195"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfAgePeriod"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/medicalServices/{medicalServiceCode}/specialities": {
      "get": {
        "tags": [
          "Medical service"
        ],
        "summary": "Gauti kvalifikacijas | Get specialities",
        "operationId": "getSpecialitiesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceCode",
            "in": "path",
            "description": "Medicinines paslaugos kodas | Medical service code",
            "required": true,
            "type": "string",
            "x-example": "2195"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSpeciality"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/new/receptions/{receptionId}/workplaces": {
      "get": {
        "tags": [
          "Workplace"
        ],
        "summary": "Gauti registratūros darbo vietas | Retrieve a receptions list of workplaces",
        "operationId": "getReceptionWorkplacesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceCodes",
            "in": "query",
            "description": "Sveikatos paslaugos kodai | Health care service codes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos Id | Organization Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto Identifikatorius | Practitioner Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "roomId",
            "in": "query",
            "description": "Kabineto Id | Room Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roomName",
            "in": "query",
            "description": "Kabineto numeris arba pavadinimas | Room number or name",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfWorkplace"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workplace"
        ],
        "summary": "Sukurti darbo vietą | Create a workplace",
        "operationId": "createWorkplaceNewUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "workplaceCreationRequest",
            "description": "Darbo vietos sukūrimo užklausa | Workplace creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkplaceCreationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/new/receptions/{receptionId}/workplaces/{id}": {
      "get": {
        "tags": [
          "Workplace"
        ],
        "summary": "Gauti registratūros darbo vietą | Retrieve a Receptions workplace",
        "operationId": "getReceptionWorkplaceUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Darbo vietos Id | Workplace Id",
            "required": true,
            "type": "string",
            "x-example": "155"
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Workplace"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workplace"
        ],
        "summary": "Atnaujinti darbo vietą | Update a workplace",
        "operationId": "updateWorkplaceNewUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Darbo vietos Id | Workplace Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "workplaceUpdateRequest",
            "description": "Darbo vietos atnaujinimo užklausa | Workplace update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkplaceUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gauti įstaigas | Retrieve a list of organizations",
        "operationId": "getOrganizationsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "jarCode",
            "in": "query",
            "description": "Įstaigos JAR kodas | Organization JAR code",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationName",
            "in": "query",
            "description": "Įstaigos pavadinimas | Organization name",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "parentOrgId",
            "in": "query",
            "description": "Aukščiausio lygio tėvinės įstaigos Id | Highest level parent organization Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "sveidraId",
            "in": "query",
            "description": "Įstaigos SVEIDRA identifikatorius | Organization SVEIDRA identifier",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfOrganization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/organizations/{organizationId}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gauti įstaigą | Retrieve an organization",
        "description": "### Reikalavimai\n* isCid ir isSveidra abu negali būti true.\n* parentOrgId reikia įvesti tik, kai isCid yra true.\n\n\n### Requirements\n* isCid and isSveidra cannot both be true.\n* parentOrgId should be given only if isCid is true.\n",
        "operationId": "getOrganizationUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "isSveidra",
            "in": "query",
            "description": "Ar tai sveikatos draudimo id | Is it a health insurance id",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "Įstaigos Id | Organization Id",
            "required": true,
            "type": "string",
            "x-example": "141"
          },
          {
            "name": "parentOrgId",
            "in": "query",
            "description": "Aukščiausio lygio tėvinės įstaigos Id | Highest level parent organization Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Atnaujinti įstaigą | Update an organization",
        "operationId": "updateOrganizationUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "Įstaigos Id | Organization Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "organizationUpdateRequest",
            "description": "Įstaigos atnaujinimo užklausa | Organization update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationUpdateRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/organizations/{organizationId}/practitioners": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Gauti IPR įstaigos darbuotojus  | Retrieve a list of IPR organization practitioners",
        "operationId": "getOrganizationPractitionersUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "IPR Įstaigos identifikatorius | IPR organization identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 124
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1000145374
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1000148896
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfPractitioner"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/patient/{patientId}/appointments": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Gauti paciento registracijas | Get patient appointments",
        "operationId": "getPatientAppointmentsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "patientId",
            "in": "path",
            "description": "Paciento identifikatorius | patient identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005928505
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PatientAppointment"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/patients": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "Gauti paciento duomenis pagal kitus kriterijus nei identifikatorius | Get a patient by criteria other than the identifier",
        "description": "## Reikalavimai | Requirements\n1. <span>Asmens kodo reikšmė privalo tenkinti būtinas sąlygas Lietuvos asmens kodui.</span> A personal code value must meet requirements for Lithuanian personal code.\n",
        "operationId": "getPatientUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "esiNumber",
            "in": "query",
            "description": "Elektroninės sveikatos istorijos (ESI) numeris | Electronic health history number",
            "required": false,
            "type": "string",
            "maxLength": 1100,
            "minLength": 0
          },
          {
            "name": "personalCode",
            "in": "query",
            "description": "Asmens kodas | Personal code",
            "required": false,
            "type": "string",
            "pattern": "^\\d{11}$"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/patients/{patientId}": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "Gauti pacientą | Get patient",
        "operationId": "getPatientUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "patientId",
            "in": "path",
            "description": "Paciento id | Patient id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1000092493
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/patients/{patientId}/referrals": {
      "get": {
        "tags": [
          "Referral"
        ],
        "summary": "Gauti paciento siuntimus | Get patient referrals",
        "operationId": "getPatientReferralsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "patientId",
            "in": "path",
            "description": "Paciento identifikatorius | Patient identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1002402541
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfReferral"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/practitioners": {
      "get": {
        "tags": [
          "Practitioner"
        ],
        "summary": "Gauti specialistus iš FHIR pagal IPR organizaciją | Get practitioners from FHIR using the an IPR organization",
        "description": "## Pastabos | Notes\n1. <span>Specialistai yra grąžinami iš ESPBI specialistų katalogo, todėl nebūtinai egzistuos ir IPR struktūroje.</span> Practitioners are searched in the ESPBI structure. Thus, they may not exist in the IPR structure.\n",
        "operationId": "getPractitionersUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "IPR Įstaigos Id | IPR Organization Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 34
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1000145374
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1000148896
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfPractitioner"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/practitioners/{practitionerId}": {
      "get": {
        "tags": [
          "Practitioner"
        ],
        "summary": "Gauti specialistą iš FHIR | Get practitioner from FHIR",
        "description": "## Pastabos | Notes\n1. <span>Specialistai ieškomi ESPBI specialistų kataloge, todėl nebūtinai egzistuoja ir IPR struktūroje.</span> Practitioners are searched in the ESPBI structure. Thus, they may not exist in the IPR structure.\n",
        "operationId": "getPractitionerUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "practitionerId",
            "in": "path",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1000145374
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1000148896
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Practitioner"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions": {
      "get": {
        "tags": [
          "Reception"
        ],
        "summary": "Gauti registratūras | Retrieve a list of receptions",
        "operationId": "getReceptionsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos id | Organization id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 34
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionName",
            "in": "query",
            "description": "Registratūros pavadinimas | Reception name",
            "required": false,
            "type": "string",
            "maxLength": 300,
            "minLength": 0
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfReception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Reception"
        ],
        "summary": "Sukurti registratūrą | Create a reception",
        "operationId": "createReceptionUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "in": "body",
            "name": "receptionCreationRequest",
            "description": "Registratūros sukūrimo užklausa | Reception update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceptionCreationRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Reception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}": {
      "get": {
        "tags": [
          "Reception"
        ],
        "summary": "Gauti registratūrą | Retrieve a reception",
        "operationId": "getReceptionUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos id (privalomas, jei naudojamas vidinis registratūros Id) | Organization id (required if internal reception Id is used)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 34
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros id | Reception id",
            "required": true,
            "type": "string",
            "x-example": "44"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Reception"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Reception"
        ],
        "summary": "Atnaujinti registratūrą | Update a reception",
        "operationId": "updateReceptionUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros id | Reception id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "receptionUpdateRequest",
            "description": "Registratūros atnaujinimo užklausa | Reception update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceptionUpdateRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Reception"
        ],
        "summary": "Ištrinti registratūrą | Delete a reception",
        "operationId": "deleteReceptionUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros id | Reception id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/appointments": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Gauti registracijas | Get appointments",
        "operationId": "getAppointmentsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Registracijų identifikatoriai | Appointment identifiers",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "iprOrganizationId",
            "in": "query",
            "description": "IPR Įstaigos Id | IPR Organization Id",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 34
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "isPatientArrived",
            "in": "query",
            "description": "Ar pacientas atvyko | Has patient arrived for an appointment",
            "required": false,
            "type": "boolean",
            "x-example": "false"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "patientId",
            "in": "query",
            "description": "Paciento identifikatorius | patient identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1005928505
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "slotDateFrom",
            "in": "query",
            "description": "Datos intervalo pradžia, į kurį turi patekti talono laikas | The start of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2018-12-24 10:00:00"
          },
          {
            "name": "slotDateTo",
            "in": "query",
            "description": "Datos intervalo pabaiga, į kurį turi patekti talono laikas | The end of the date range to which the appointment must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2018-12-30 19:00:00"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Registracijos būsena\nGalimos reikšmės:\n* null (nenaudojama) - grąžinamos registracijos su bet kokia būsena\n* 1 - patvirtintos\n* 2 - nepatvirtintos\n* 12 - patvirtintos ir nepatvirtintos\n* 3 - atmestos\n* 4 - atšauktos\n\n\nAppointment status\nAllowed values:\n* null (not used) - appointments with any status are returned\n* 1 - approved\n* 2 - not approved\n* 12 - approved and not approved\n* 3 - rejected\n* 4 - cancelled\n",
            "required": false,
            "type": "string",
            "pattern": "1|2|12|3|4",
            "x-example": "12",
            "enum": [
              "1",
              "12",
              "2",
              "3",
              "4"
            ]
          },
          {
            "name": "updateDateFrom",
            "in": "query",
            "description": "Registracijos informacijos pakeitimo datos intervalo pradžia | The start of the date range to which the first appointment change must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-08-19 07:00:00"
          },
          {
            "name": "updateDateTo",
            "in": "query",
            "description": "Registracijos informacijos pakeitimo datos intervalo pabaiga | The end of the date range to which the last appointment change must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2019-10-01 07:00:00"
          },
          {
            "name": "workplaceId",
            "in": "query",
            "description": "Darbo vietos identifikatorius | Workplace identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 309
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfAppointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Sukurti registraciją | Create appointment",
        "description": "## Reikalavimai | Requirements\n### Paslaugos | Medical services\n1. <span>Vienai paslaugai galima registruoti tik vieną kartą. Jeigu paslauga jau turi registraciją ir jai yra kuriamos naujos registracijos, bus paliekama pati paskutinė registracija, o visos kitos atšaukiamos.</span> A service can have no more than one appointment only. If a service already has an appointment and more appointments are created for this service, the last one will be considered valid and all previous appointments will be cancelled.\n",
        "operationId": "createAppointmentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "appointmentCreationRequest",
            "description": "Registracijos sukūrimo užklausa | Appointment creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentCreationRequest"
            }
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Gauti registraciją | Get appointment",
        "operationId": "getAppointmentUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "string",
            "x-example": "2114"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Kuriuos objektus papildomai grąžinti (įrašyti objektų pavadinimus atskirtus kableliais)\nPrasmingos reikšmės: referral |\nWhich object to also return (input object names separated by commas)\nValid objects: referral",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Atšaukti registraciją | Cancel appointment",
        "description": "Atšauktos registracijos vidinis id (cid) yra ištrinamas | The internal id (cid) of the cancelled appointment is deleted",
        "operationId": "cancelAppointmentUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cancellationReasonCode",
            "in": "query",
            "description": "Registracijos atšaukimo priežasties identifikatorius\nIš registracijos būsenos priežasčių API reikia pasiimti atitinkamus priežasčių kodus.\nGalimi priežasties identifikatoriaus tipai:\n* ATMESTA_PACIENTO - atšaukia pacientas\n* TALONAS_ATMESTAS_ISTAIGOS - atšaukia įstaiga\n\n\nAppointment cancellation reason identifier\nThe appointment state reasons API should be used to get respective cancellation reason codes.\nAllowed reason identifier types:\n* ATMESTA_PACIENTO - cancelled by patient\n* TALONAS_ATMESTAS_ISTAIGOS - cancelled by organization\n",
            "required": true,
            "type": "string",
            "x-example": "35"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Appointment"
        ],
        "summary": "Atnaujinti registraciją | Update appointment",
        "description": "Atnaujinamos tik netuščios registracijos reikšmės | Only non-null appointment values are updated",
        "operationId": "updateAppointmentUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 8339
          },
          {
            "in": "body",
            "name": "appointmentUpdateRequest",
            "description": "appointmentUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentUpdateRequest"
            }
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/appointments/{appointmentId}/history": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Gauti registracijos istoriją | Get appointment history",
        "operationId": "getAppointmentsUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfAppointmentHistory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/appointments/{appointmentId}/referral": {
      "post": {
        "tags": [
          "Referral"
        ],
        "summary": "Susieti siuntimą su registracija arba eile | Assign a referral to the appointment or queue",
        "description": "### Reikalavimai\n* Privalomi laukai, jei tai elektroninis siuntimas:\n1. composition arba resource identifikatorius\n\n* Privalomi laukai, jei tai popierinis siuntimas:\n1. siunčiančios organizacijos identifikatorius\n2. diagnozės kodas\n3. specialisto, kuriam siunčiama, profesinė kvalifikacija\n4. paslaugos kodas\n5. paslaugos lygis\n\n\n### Requirements\n* Mandatory fields when the referral is electronic:\n1. composition identifier or resource identifier\n\n* Mandatory fields when the referral is paper:\n1. sender organization identifier\n2. diagnosis code\n3. receiver practitioner speciality code\n4. medical service code\n5. level of service\n",
        "operationId": "assignReferralToAppointmentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos arba eilės identifikatorius | Appointment or queue identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "in": "body",
            "name": "referralAssignmentRequest",
            "description": "Siuntimo susiejimo užklausa | Referral assignment request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReferralAssignmentRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Referral"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/appointments/{appointmentId}/slotOffers": {
      "get": {
        "tags": [
          "Slot offer"
        ],
        "summary": "Gauti pasiūlymus talonui | Get slot offers",
        "operationId": "getSlotOffersUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Registracijos identifikatorius | Appointment identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 2164
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSlotOffer"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/params": {
      "get": {
        "tags": [
          "Reception parameter"
        ],
        "summary": "Gauti registratūros parametrus | Retrieve a list of reception parameters",
        "operationId": "getReceptionParamsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfReceptionParameter"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Reception parameter"
        ],
        "summary": "Sukurti registratūros parametrą | Create a reception parameter",
        "operationId": "createReceptionParamUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "in": "body",
            "name": "receptionParameterCreationRequest",
            "description": "Registratūros parametrų sukūrimo užklausa | Reception parameters creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceptionParameterCreationRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ReceptionParameter"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/params/{name}": {
      "get": {
        "tags": [
          "Reception parameter"
        ],
        "summary": "Gauti registratūros parametrą | Retrieve a reception parameter",
        "operationId": "getReceptionParamUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "name",
            "in": "path",
            "description": "Parametro pavadinimas | Parameter name",
            "required": true,
            "type": "string",
            "enum": [
              "automaticQueues",
              "mandatoryEmail",
              "mandatoryPhone",
              "notificationsByEmail",
              "notificationsBySms"
            ]
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReceptionParameter"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Reception parameter"
        ],
        "summary": "Atnaujinti registratūros parametrą | Update a reception parameter",
        "description": "### Reikalavimai\n* Parametro objekto pavadinimo pildyti nereikia.\n* Parametro objekto registratūros Id pildyti nereikia.\n* Metadata pildyti nereikia.\n\n\n### Requirements\n* Parameter object name should be null.\n* Parameter object reception Id should be null.\n* Metadata should be null.\n",
        "operationId": "updateReceptionParamUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "name",
            "in": "path",
            "description": "Parametro pavadinimas | Parameter name",
            "required": true,
            "type": "string",
            "enum": [
              "automaticQueues",
              "mandatoryEmail",
              "mandatoryPhone",
              "notificationsByEmail",
              "notificationsBySms"
            ]
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "receptionParameterUpdateRequest",
            "description": "Registratūros parametrų atnaujinimo užklausa | Reception parameters update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceptionParameterUpdateRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Reception parameter"
        ],
        "summary": "Ištrinti registratūros parametrą | Delete a reception parameter",
        "operationId": "deleteReceptionParamUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "name",
            "in": "path",
            "description": "Parametro pavadinimas | Parameter name",
            "required": true,
            "type": "string",
            "enum": [
              "automaticQueues",
              "mandatoryEmail",
              "mandatoryPhone",
              "notificationsByEmail",
              "notificationsBySms"
            ]
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/practitioners": {
      "get": {
        "tags": [
          "Reception"
        ],
        "summary": "Gauti registratūros darbuotojus | Get receptionists",
        "operationId": "getReceptionPractitionersUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1000145374
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1000148896
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfPractitioner"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/practitioners/{practitionerId}/roles": {
      "get": {
        "tags": [
          "Practitioner roles"
        ],
        "summary": "Gauti roles | Retrieve roles",
        "operationId": "getRolesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "practitionerId",
            "in": "path",
            "description": "Specialisto Id | Practitioner Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Practitioner roles"
        ],
        "summary": "Pakeisti specialisto roles | Patch practitioner roles",
        "operationId": "patchRolesUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "practitionerId",
            "in": "path",
            "description": "Specialisto Id | Practitioner Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "rolePatchRequest",
            "description": "Rolių pakeitimo užklausa | Role patch request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolePatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/queueLength": {
      "get": {
        "tags": [
          "Queue"
        ],
        "summary": "Gauti eilės ilgį| Get queue length",
        "operationId": "getQueueLengthUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceId",
            "in": "query",
            "description": "Paslaugos identifikatorius |Service identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 258
          },
          {
            "name": "patientPaysForVisit",
            "in": "query",
            "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
            "required": true,
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "pattern": "[FPN]",
            "x-example": "F",
            "enum": [
              "F",
              "N",
              "P"
            ]
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius |Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "specialityCode",
            "in": "query",
            "description": "Specialybės kodas | Speciality code",
            "required": true,
            "type": "string",
            "x-example": "221236"
          },
          {
            "name": "typeCode",
            "in": "query",
            "description": "Eilės tipo kodas | Queue type code",
            "required": true,
            "type": "string",
            "x-example": "B"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Queue"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/queues": {
      "get": {
        "tags": [
          "Queue"
        ],
        "summary": "Gauti eiles | Get queues",
        "operationId": "getQueuesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceId",
            "in": "query",
            "description": "Paslaugos identifikatorius |Service identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 258
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "patientPaysForVisit",
            "in": "query",
            "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
            "required": false,
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "pattern": "[FPN]",
            "x-example": "F",
            "enum": [
              "F",
              "N",
              "P"
            ]
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius |Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "specialityCode",
            "in": "query",
            "description": "Specialybės kodas |Profession code",
            "required": false,
            "type": "string",
            "x-example": "221236"
          },
          {
            "name": "typeCode",
            "in": "query",
            "description": "Eilės tipo kodas | Queue type code",
            "required": false,
            "type": "string",
            "x-example": "B"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Queue"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Queue"
        ],
        "summary": "Registruoti į eilę | Register/add to queue",
        "operationId": "registerToQueueUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius |Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "in": "body",
            "name": "registrationToQueueRequest",
            "description": "Registracijos eilei užklausa | Registration to queue request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistrationToQueueRequest"
            }
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/queues/{queueId}": {
      "get": {
        "tags": [
          "Queue"
        ],
        "summary": "Gauti eilės elementą | Get queue element",
        "operationId": "getQueueUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Kuriuos objektus papildomai grąžinti (įrašyti objektų pavadinimus atskirtus kableliais)\nPrasmingos reikšmės: referral |\nWhich object to also return (input object names separated by commas)\nValid objects: referral",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "Eilės identifikatorius | Queue identifier",
            "required": true,
            "type": "string",
            "x-example": "5877"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius |Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Queue"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Queue"
        ],
        "summary": "Ištrinti eilės elementą | Delete queue element ",
        "operationId": "deleteQueueUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCId",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "Eilės identifikatorius | Queue identifier",
            "required": true,
            "type": "string",
            "x-example": "5877"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius |Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "rejectionReason",
            "in": "query",
            "description": "Eilės atšaukimo priežasties identifikatorius | Queue rejection reason identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "rejectionReasonId",
            "in": "query",
            "description": "Eilės atšaukimo priežasties identifikatorius | Queue rejection reason identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/queues/{queueId}/assignAppointment/{slotId}": {
      "post": {
        "tags": [
          "Queue"
        ],
        "summary": "Priskirti vizitą eilės elementui | Assign appointment to queue element ",
        "operationId": "assignAppointmentUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isQueueCId",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "isSlotCid",
            "in": "query",
            "description": "Ar tai vidinis talono id | Is it an internal slot id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "queueId",
            "in": "path",
            "description": "Eilės elemento identifikatorus | Queue element identifier",
            "required": true,
            "type": "string",
            "x-example": "5877"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius |Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "string",
            "x-example": "99751"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/rooms": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Gauti kabinetus | Get rooms",
        "operationId": "getRoomsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos ID | Organization ID",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros ID | Reception ID",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "validFrom",
            "in": "query",
            "description": "Data nuo kurios galima naudoti darbo vietas | When are workplaces valid from",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "validTill",
            "in": "query",
            "description": "Data iki kurios galima nautodi darbo vietas | When are workplace valid till",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfRoom"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "Sukurti kabinetą | Create a room",
        "operationId": "createRoomUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar turėtų būti gražintas sukurtas objektas? | Should created object be returned?",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "roomCreationRequest",
            "description": "Kabineto sukūrimo užklausa | Room creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/rooms/{roomId}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "Gauti kabinetą | Get room ",
        "operationId": "getRoomUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos id | Organization id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros ID | Reception ID",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "roomId",
            "in": "path",
            "description": "Kabineto id | Room id",
            "required": true,
            "type": "string",
            "x-example": "2460"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Room"
        ],
        "summary": "Atnaujinti kabinetą | Update a room",
        "operationId": "updateRoomUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar turėtų būti gražintas sukurtas objektas? | Should created object be returned?",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "roomId",
            "in": "path",
            "description": "Kabineto id | Room id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 2797
          },
          {
            "in": "body",
            "name": "roomUpdateRequest",
            "description": "Kabineto atnaujinimo užklausa | Room update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoomUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Room"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Room"
        ],
        "summary": "Panaikinti kabinetą | Delete a room",
        "operationId": "deleteRoomUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "roomId",
            "in": "path",
            "description": "Kabineto id| Room id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 2798
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Gauti talonus | Get slots",
        "operationId": "getSlotsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Datos intervalo pradžia, į kurį turi patekti numatytas talono laikas | The start of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-05-06 07:08:09"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Datos intervalo pabaiga, į kurį turi patekti numatytas talono laikas | The end of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-05-07 08:09:10"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Talonų identifikatoriai | Slot identifiers",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "isPublished",
            "in": "query",
            "description": "Ar vizitas figūruoja IPR laikų paieškoje\nGalimos reikšmės:\n* null / nenurodytas - nekreipiamas dėmesys į ieškomų vizitų publikavimo požymį\n* true - talonai, kurių publikavimo data mažesnė už esamą datą \n* false - talonai, kurių publikavimo data didesnė už esamą datą \n\n\nWhether the slot is available for public search\nAllowed values:\n* null / not provided - the publication status is ignored\n* true - slots with publication date before the current date\n* false - slots with publication date after the current date\n",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "medicalServiceCode",
            "in": "query",
            "description": "Medicininės paslaugos kodas | Medical service code",
            "required": false,
            "type": "string",
            "maxLength": 30,
            "minLength": 0
          },
          {
            "name": "municipalityId",
            "in": "query",
            "description": "Savivaldybės identifikatorius iš Adresų registro | Municipality identifier from the Address Register",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 461
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Organizacijos identifikatorius | Organization identifier",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "parentOrganizationId",
            "in": "query",
            "description": "Aukščiausio lygio (pirmo lygio) tėvinė įstaiga | Highest level parent organization (first level)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "professionCode",
            "in": "query",
            "description": "Specialisto kvalifikacijos kodas | Practitioner profession code",
            "required": false,
            "type": "string",
            "maxLength": 6,
            "minLength": 0
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "roomNumber",
            "in": "query",
            "description": "Kabineto numeris | Room number",
            "required": false,
            "type": "string",
            "maxLength": 50,
            "minLength": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "updateDateFrom",
            "in": "query",
            "description": "Talono informacijos pakeitimo datos intervalo pradžia | The start of the date range to which the first slot change must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-01-01 02:02:02"
          },
          {
            "name": "updateDateTo",
            "in": "query",
            "description": "Talono informacijos pakeitimo datos intervalo pabaiga | The end of the date range to which the last slot change must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-09-09 10:10:10"
          },
          {
            "name": "workplaceId",
            "in": "query",
            "description": "Darbo vietos identifikatorius | Workplace identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 309
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSlot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Slot"
        ],
        "summary": "Sukurti taloną | Create slot",
        "description": "## Reikalavimai | Requirements\n### Paslaugos | Medical services\n1. <span>Nenurodytas (null) sąrašas konvertuojamas į darbo vietoje teikiamų paslaugų sąrašą.</span> A not specified list (null) is converted to a list of medical services provided in the workplace.\n2. <span>Tuščias sąrašas konvertuojamas į darbo vietoje teikiamų paslaugų sąrašą.</span> An empty list is converted to a list of medical services provided in the workplace.\n3. <span>Jei sąraše yra paslaugų, nepriklausančių darbo vietos paslaugų aibei, grąžinama klaida.</span> If some medical services in the list are not provided in the workplace services set, an error is returned.\n4. <span>Kai paslaugos gautame sąraše priklauso darbo vietoje teikiamų paslaugų aibei, jos susiejamos su talonu. Tikslas - norima nurodyti siauresnę paslaugų aibę, kuri bus teikiama, lyginant su ta paslaugų aibe, kuri gali būti teikiama toje darbo vietoje.</span> When medical services in a list are provided in the workplace, they are linked to the slot. The goal of passing a list of medical services here is to narrow down the set of medical services provided in the workplace.\n\n\n### Publikavimas | Publication\n1. <span>Data ir laikas negali būti ankstesni už einamuosius datą ir laiką įrašo kūrimo metu. Jei yra ankstesni arba laukas tuščias (null), įrašoma einamoji data ir laikas.</span> The date and time cannot be earlier than the current date and time. If the field is omitted (null) or earlier, publication is set to the date and time of the creation.\n\n\n### Kiti | Miscellaneous\n1. <span>Talono darbo vieta turi priklausyti talono organizacijai.</span> Slot workplace must belong to slot organization.\n",
        "operationId": "createSlotUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "slotCreationRequest",
            "description": "Talono sukūrimo užklausa | Slot creation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlotCreationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Slot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/generations": {
      "post": {
        "tags": [
          "Slot generation"
        ],
        "summary": "Užsakyti talonų generavimą | Schedule slot generation",
        "operationId": "scheduleSlotGenerationUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "slotGenerationRequest",
            "description": "Talonų generavimo užsakymas | Slot generation request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlotGenerationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Slot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/generations/{generationId}": {
      "get": {
        "tags": [
          "Slot generation"
        ],
        "summary": "Gauti talonų generavimą | Get slot generation",
        "operationId": "getGenerationUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "generationId",
            "in": "path",
            "description": "Talonų generavimo identifikatorius | Slot generation identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Slot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/publications": {
      "patch": {
        "tags": [
          "Slot"
        ],
        "summary": "Nustatyti publikavimo požymį talonams | Set publication attribute for slots",
        "operationId": "publishSlotsUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isPublication",
            "in": "query",
            "description": "Kokį publikavimo požymį nustatyti\nGalimos reikšmės:\n* true - publikuoti\n* false - nepublikuoti\n\n\nWhat publication attribute to set\nAllowed values:\n* true - publish\n* false - unpublish\n",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "slotIds",
            "description": "Talonai | Slots",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/{slotId}": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Gauti taloną | Get slot",
        "operationId": "getSlotUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Slot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Slot"
        ],
        "summary": "Ištrinti taloną | Delete slot",
        "operationId": "deleteSlotUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Slot"
        ],
        "summary": "Redaguoti taloną | Patch slot",
        "description": "## Reikalavimai | Requirements\n### Publikavimas | Publication\n1. <span>Data ir laikas negali būti ankstesni už einamuosius datą ir laiką įrašo kūrimo metu. Jei yra ankstesni, įrašoma einamoji data ir laikas.</span> The date and time cannot be earlier than the current date and time. If it is earlier, publication is set to the date and time of creation.\n\n\n### Aktualūs laukai | Relevant fields\n<span>Redaguojami žemiau išvardinti `Slot` laukai.</span> The following `Slot` fields are patchable.\n* `publicationStart`\n* `typeCode`\n* `description`\n* `paymentAttribute`\n* `isReferralRequired`\n* `visibilityCodes`\n",
        "operationId": "patchSlotUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "slotPatch",
            "description": "Talono pakeitimai | Slot changes",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlotPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/{slotId}/history": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Gauti talono istoriją | Get slot history",
        "operationId": "getSlotHistoryUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSlotHistory"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/{slotId}/partners": {
      "get": {
        "tags": [
          "Partner"
        ],
        "summary": "Gauti partnerius | Retrieve a list of partners",
        "operationId": "getPartnersUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono Id | Slot Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfPartner"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Partner"
        ],
        "summary": "Sukurti partnerį | Create a partner",
        "operationId": "createPartnerUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Partnerinės įstaigos id | Partner organization id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono Id | Slot Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Partner"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/{slotId}/partners/{organizationId}": {
      "delete": {
        "tags": [
          "Partner"
        ],
        "summary": "Ištrinti partnerį | Delete a partner",
        "operationId": "deletePartnerUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "Partnerio įstaigos Id | Partner organization Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono Id | Slot Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/{slotId}/publications": {
      "patch": {
        "tags": [
          "Slot"
        ],
        "summary": "Nustatyti publikavimo požymį talonui | Set publication attribute for slot",
        "operationId": "publishSlotUsingPATCH",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isPublication",
            "in": "query",
            "description": "Kokį publikavimo požymį nustatyti\nGalimos reikšmės:\n* true - publikuoti\n* false - nepublikuoti\n\n\nWhat publication attribute to set\nAllowed values:\n* true - publish\n* false - unpublish\n",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/slots/{slotId}/reservations": {
      "delete": {
        "tags": [
          "Slot"
        ],
        "summary": "Atšaukti talono rezervaciją | Cancel slot reservation",
        "operationId": "cancelSlotReservationUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Slot"
        ],
        "summary": "Rezervuoti taloną | Reserve slot",
        "operationId": "reserveSlotUsingPATCH_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "reservationPeriod",
            "in": "query",
            "description": "Rezervavimo laikas sekundėmis | Reservation time in seconds",
            "required": false,
            "type": "integer",
            "default": 300,
            "format": "int64"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/workpalce/{workplaceId}/slots/generations": {
      "get": {
        "tags": [
          "Slot generation"
        ],
        "summary": "Gauti talonų generavimus | Get slot generations",
        "operationId": "getGenerationsUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "workplaceId",
            "in": "path",
            "description": "Darbo vietos identifikatorius | Workplace identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Slot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/workplaces": {
      "get": {
        "tags": [
          "Workplace"
        ],
        "summary": "Gauti darbo vietas | Retrieve a list of workplaces",
        "operationId": "getWorkplacesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceCodes",
            "in": "query",
            "description": "Sveikatos paslaugos kodai | Health care service codes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos Id | Organization Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto Identifikatorius | Practitioner Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "roomId",
            "in": "query",
            "description": "Kabineto Id | Room Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roomName",
            "in": "query",
            "description": "Kabineto numeris arba pavadinimas | Room number or name",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfWorkplace"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workplace"
        ],
        "summary": "Sukurti darbo vietą | Create a workplace",
        "description": "### Reikalavimai\n* Privaloma įvesti kabineto Id.\n* Privaloma įvesti specialisto Id.\n* Privaloma įvesti įstaigos Id.\n* Privaloma įvesti bent vieną kvalifikacijos kodą.\n* Darbo vietos Id pildyti nereikia.\n* Metadata pildyti nereikia.\n\n\n### Requirements\n* Room Id should not be null.\n* Practitioner Id should not be null.\n* Organization Id should not be null.\n* Qualification Codes should not be null.\n* Workplace Id should be null.\n* Metadata should be null.\n",
        "operationId": "createWorkplaceUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "full",
            "in": "query",
            "description": "Ar grąžinti sukurtą objektą | Whether to return the created object",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "workplace",
            "description": "Darbo vietos objektas | Workplace object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workplace"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Workplace"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/receptions/{receptionId}/workplaces/{id}": {
      "get": {
        "tags": [
          "Workplace"
        ],
        "summary": "Gauti darbo vietą | Retrieve a workplace",
        "operationId": "getWorkplaceUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Darbo vietos Id | Workplace Id",
            "required": true,
            "type": "string",
            "x-example": "155"
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Workplace"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workplace"
        ],
        "summary": "Atnaujinti darbo vietą | Update a workplace",
        "description": "### Reikalavimai\n* Privaloma įvesti kabineto Id.\n* Privaloma įvesti specialisto Id.\n* Privaloma įvesti bent vieną kvalifikacijos kodą.\n* Įstaigos id pildyti nereikia.\n* Vidinio id (Cid) pildyti nereikia.\n* Metadata pildyti nereikia.\n\n\n### Requirements\n* Room Id should not be null.\n* Practitioner Id should not be null.\n* Qualification codes should not be null.\n* Organization id should be null.\n* Internal id should be null.\n* Metadata should be null.\n",
        "operationId": "updateWorkplaceUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Darbo vietos Id | Workplace Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "in": "body",
            "name": "workplace",
            "description": "Darbo vietos objektas | Workplace object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workplace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workplace"
        ],
        "summary": "Ištrinti darbo vietą | Delete a workplaces",
        "operationId": "deleteWorkplaceUsingDELETE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "id",
            "in": "path",
            "description": "Darbo vietos Id | Workplace Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "receptionId",
            "in": "path",
            "description": "Registratūros Id | Reception Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/slotTypes": {
      "get": {
        "tags": [
          "Slot type"
        ],
        "summary": "Gauti talonų tipus | Retrieve a list of slot types",
        "operationId": "getSlotTypesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SlotType"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/slots": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Ieškoti talonų | Search slots",
        "operationId": "searchSlotsUsingGET_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "changedFrom",
            "in": "query",
            "description": "Talono informacijos pakeitimo datos intervalo pradžia | The start of the date range to which the first slot change must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-01-01 02:02:02"
          },
          {
            "name": "changedTill",
            "in": "query",
            "description": "Talono informacijos pakeitimo datos intervalo pabaiga | The end of the date range to which the last slot change must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-09-09 10:10:10"
          },
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "endsTill",
            "in": "query",
            "description": "Datos intervalo pabaiga, į kurį turi patekti numatytas talono laikas | The end of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-05-07"
          },
          {
            "name": "isWithReferral",
            "in": "query",
            "description": "Ar talonui būtinas siuntimo | Whether a slot requires referral",
            "required": false,
            "type": "boolean",
            "x-example": "false"
          },
          {
            "name": "medicalServiceCode",
            "in": "query",
            "description": "Sveikatos paslaugos kodas | Medical service code",
            "required": false,
            "type": "string",
            "x-example": "2195"
          },
          {
            "name": "municipalityId",
            "in": "query",
            "description": "Savivaldybės identifikatorius iš Adresų registro | Municipality identifier from the Address Register",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 461
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Įstaigos identifikatorius | Organization identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1000139194
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "paymentAttribute",
            "in": "query",
            "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
            "required": false,
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "pattern": "[FPN]",
            "x-example": "N",
            "enum": [
              "F",
              "N",
              "P"
            ]
          },
          {
            "name": "practitionerId",
            "in": "query",
            "description": "Specialisto identifikatorius | Practitioner identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 1002614698
          },
          {
            "name": "receptionId",
            "in": "query",
            "description": "Registratūros identifikatorius | Reception identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 44
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "specialityCode",
            "in": "query",
            "description": "Kvalifikacijos kodas | Speciality code",
            "required": false,
            "type": "string",
            "x-example": "7047"
          },
          {
            "name": "startsFrom",
            "in": "query",
            "description": "Datos intervalo pradžia, į kurį turi patekti numatytas talono laikas | The start of the date range to which the slot must fall",
            "required": false,
            "type": "string",
            "format": "date-time",
            "x-example": "2020-05-06"
          },
          {
            "name": "typeCode",
            "in": "query",
            "description": "Talono tipo kodas | Slot type code",
            "required": false,
            "type": "string",
            "x-example": "B"
          },
          {
            "name": "workplaceId",
            "in": "query",
            "description": "Darbo vietos identifikatorius | Workplace identifier",
            "required": false,
            "type": "integer",
            "format": "int64",
            "x-example": 485
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSlot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/slots/{slotId}": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Gauti taloną | Get slot",
        "operationId": "getSlotUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Slot"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/slots/{slotId}/appointments": {
      "get": {
        "tags": [
          "Slot"
        ],
        "summary": "Gauti su talonu susietų registracijų sąrašą | Get a list of appointments associated with the slot",
        "operationId": "getAppointmentForSlotUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "isCid",
            "in": "query",
            "description": "Ar tai vidinis id | Is it an internal id",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-example": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "requestor_id",
            "in": "header",
            "description": "Vartotojo identifikatorius | User identifier",
            "required": true,
            "type": "integer",
            "format": "int64",
            "x-example": 1005911364
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "slotId",
            "in": "path",
            "description": "Talono identifikatorius | Slot identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfAppointment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/specialities": {
      "get": {
        "tags": [
          "Speciality"
        ],
        "summary": "Gauti visas kvalifikacijas | Get all specialities",
        "operationId": "getAllSpecialitiesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSpeciality"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/specialities/{specialityCode}": {
      "get": {
        "tags": [
          "Speciality"
        ],
        "summary": "Gauti kvalifikaciją pagal kodą | Get speciality by code",
        "operationId": "getSpecialityUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "specialityCode",
            "in": "path",
            "description": "Kvalifikacijos kodas | Speciality code",
            "required": true,
            "type": "string",
            "x-example": "221221"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Speciality"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    },
    "/v1/specialityServices/": {
      "get": {
        "tags": [
          "Medical service"
        ],
        "summary": "Gauti kvalifikacijų paslaugas | Get speciality services",
        "operationId": "getSpecialityServicesUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "consumerKey",
            "description": "JAR kodas | Consumer key",
            "required": false
          },
          {
            "name": "medicalServiceCode",
            "in": "query",
            "description": "Medicinines paslaugos kodas | Medical service code",
            "required": false,
            "type": "string",
            "x-example": "73"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Puslapis | Page",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Puslapio dydis | Page size",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int64"
          },
          {
            "name": "specialtyCode",
            "in": "query",
            "description": "Specialybės kodas | Qualification code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvelopeOfListOfSpecialityService"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        },
        "security": [
          {
            "OAuth": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "OAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "AgePeriod": {
      "type": "object",
      "properties": {
        "ageFrom": {
          "type": "integer",
          "format": "int32",
          "description": "Nuo kokio amžiaus | From what age"
        },
        "ageTill": {
          "type": "integer",
          "format": "int32",
          "description": "Iki kokio amžiaus | Until what age"
        },
        "description": {
          "type": "string",
          "description": "Amžiaus intervalo aprašymas | Age interval description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento amžiaus intervalo id | Patient age interval id"
        },
        "isForAdult": {
          "type": "string",
          "description": "Ar amžiaus intervalas suaugusiam ar vaikui | Is age period for adult or child"
        },
        "unitsOfMeasure": {
          "type": "string",
          "description": "Matavimo vienetai | Units of measurement"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "description": "Nuo kada galioja klasifikatoriaus įrašas | Since when the classifier entry is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "description": "Iki kada galioja klasifikatoriaus įrašas | Until when the classifier entry is valid to"
        }
      },
      "title": "AgePeriod",
      "description": "Amžiaus intervalo modelis | Age period model"
    },
    "ApiError": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "unixTimestamp": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ApiError"
    },
    "Appointment": {
      "type": "object",
      "properties": {
        "appointmentContacts": {
          "type": "array",
          "description": "Paciento registracijos kontaktiniai duomenys | Patients appointment contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "approvalDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-24 16:00:00",
          "description": "Data ir laikas, kada paciento registracija buvo patvirtinta | Date and time when patient registration was approved"
        },
        "cId": {
          "type": "string",
          "example": "123-456",
          "description": "Registracijos vidinis identifikatorius įstaigoje | Internal appointment identifier at the organization",
          "minLength": 0,
          "maxLength": 300
        },
        "cancellationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-25 09:00:00",
          "description": "Data ir laikas, kada dėl reikiamų kriterijų neatitikimo registracija buvo atmesta specialisto | Date and time the appointment was cancelled by a practitioner due to non-compliance with the required criteria"
        },
        "delayReasonCode": {
          "type": "string",
          "example": 4,
          "description": "Paslaugos suteikimo vėlavimo priežasties kodas | Code for the reason of the delay in the provision of the service",
          "minLength": 0,
          "maxLength": 5
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 2114,
          "description": "Registracijos identifikatorius | Appointment identifier"
        },
        "isPatientArrived": {
          "type": "boolean",
          "description": "Ar pacientas atvyko | Has patient arrived for an appointment"
        },
        "isWithReferral": {
          "type": "boolean",
          "description": "Ar registracija turi siuntimą | Whether a referral is present"
        },
        "isWithSlotOffers": {
          "type": "boolean",
          "description": "Ar registracijos metu buvo geresnių pasiūlymų talonams | Whether there were any better suggested slots on time of the registration"
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos identifikatorius | Medical service identifier",
          "minLength": 0,
          "maxLength": 30
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "patient": {
          "description": "Pacientas | Patient",
          "$ref": "#/definitions/Patient"
        },
        "patientComplaint": {
          "type": "string",
          "description": "Paciento nusiskundimas | Patient complaint",
          "minLength": 0,
          "maxLength": 500
        },
        "practitionerComment": {
          "type": "string",
          "description": "Specialisto komentaras | Practitioner comment",
          "minLength": 0,
          "maxLength": 500
        },
        "referral": {
          "description": "Registracijos siuntimas | Appointment referral",
          "$ref": "#/definitions/Referral"
        },
        "registrationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-23 14:00:12",
          "description": "Data ir laikas, kada pacientas buvo užregistruotas | Date and time the patient was registered"
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "example": 86253,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        },
        "status": {
          "description": "Registracijos būsena | Appointment status",
          "$ref": "#/definitions/AppointmentStatus"
        }
      },
      "title": "Appointment",
      "description": "Registracija | Appointment"
    },
    "AppointmentCreationRequest": {
      "type": "object",
      "properties": {
        "appointmentContacts": {
          "type": "array",
          "description": "Paciento registracijos kontaktiniai duomenys | Patients appointment contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "cId": {
          "type": "string",
          "example": "123-456",
          "description": "Registracijos vidinis identifikatorius įstaigoje | Internal appointment identifier at the organization",
          "minLength": 0,
          "maxLength": 300
        },
        "delayReasonCode": {
          "type": "string",
          "example": 4,
          "description": "Paslaugos suteikimo vėlavimo priežasties kodas | Code for the reason of the delay in the provision of the service",
          "minLength": 0,
          "maxLength": 5
        },
        "isPatientArrived": {
          "type": "boolean",
          "description": "Ar pacientas atvyko | Has patient arrived for an appointment"
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos identifikatorius | Medical service identifier",
          "minLength": 0,
          "maxLength": 30
        },
        "patient": {
          "$ref": "#/definitions/Patient"
        },
        "patientComplaint": {
          "type": "string",
          "description": "Paciento nusiskundimas | Patient complaint",
          "minLength": 0,
          "maxLength": 500
        },
        "patientId": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento identifikatorius | Patient identifier"
        },
        "practitionerComment": {
          "type": "string",
          "description": "Specialisto komentaras | Practitioner comment",
          "minLength": 0,
          "maxLength": 500
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "example": 86253,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        }
      },
      "title": "AppointmentCreationRequest",
      "description": "Registracijos sukūrimo užklausa | Appointment creation request"
    },
    "AppointmentHistory": {
      "type": "object",
      "required": [
        "recordCreated"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 2114,
          "description": "Registracijos identifikatorius | Appointment identifier"
        },
        "participant": {
          "description": "Dalyvis | Participant",
          "$ref": "#/definitions/Participant"
        },
        "recordCreated": {
          "type": "integer",
          "format": "int64",
          "example": 68921,
          "description": "Įrašą sukūrusio asmnens identifikatorius | Record created by person ID"
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "description": "Talono identifikatorius | Slot identifier"
        },
        "stateReason": {
          "description": "Būklės priežastis | State reason",
          "$ref": "#/definitions/AppointmentStateReason"
        },
        "status": {
          "description": "Registracijos būklė | Appointment status",
          "$ref": "#/definitions/AppointmentStatus"
        }
      },
      "title": "AppointmentHistory",
      "description": "Registracijos istorija | Appointment history"
    },
    "AppointmentStateReason": {
      "type": "object",
      "properties": {
        "reasonCode": {
          "type": "string",
          "description": "Priežasties kodas | Reason code"
        },
        "reasonName": {
          "type": "string",
          "description": "Priežasties pavadinimas | Reason name"
        },
        "type": {
          "type": "string",
          "description": "Tipas | Type",
          "enum": [
            "ATMESTA_PACIENTO",
            "REGISTRACIJA_EILEJE",
            "REGISTRACIJOS_ATMETIMAS",
            "REGISTRACIJOS_PATVIRTINIMAS",
            "SIULOMO_LAIKO_ATSISAKYMAS",
            "TALONAS_ATMESTAS_ISTAIGOS",
            "TALONO_PRISKYRIMAS"
          ]
        }
      },
      "title": "AppointmentStateReason",
      "description": "Vizito būsenos priežasties modelis | Appointment state reason model"
    },
    "AppointmentStatus": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "string",
          "description": "Būklės kodas | Status code"
        },
        "statusName": {
          "type": "string",
          "description": "Būklės pavadinimas | Status name"
        }
      },
      "title": "AppointmentStatus",
      "description": "Vizito būklės modelis | Appointment status model"
    },
    "AppointmentUpdateRequest": {
      "type": "object",
      "properties": {
        "encounterId": {
          "type": "integer",
          "format": "int64",
          "example": 1006020591,
          "description": " FHIR_ENCOUNTER.ID - planuoto vizito susiejimas su įvykusiu apsilankymu. Užpildomas kai pacientas priimamas pas specialistą.| FHIR_ENCOUNTER.ID - linking planned appointmentwith an occured visit. Field is filled when patient is admitted to a specialist "
        },
        "isApproved": {
          "type": "boolean",
          "description": "Ar patvirtintas vizitas | Is appointment approved"
        },
        "patientArrived": {
          "type": "boolean",
          "description": "Ar pacientas atvyko | Has patient arrived"
        }
      },
      "title": "AppointmentUpdateRequest",
      "description": "Registracijos atnaujinimas | Appointment update"
    },
    "Contact": {
      "type": "object",
      "properties": {
        "contactInfo": {
          "type": "string",
          "example": 37060000000,
          "description": "Kontaktiniai duomenys | Contact data"
        },
        "contactType": {
          "type": "string",
          "example": "phone",
          "description": "Kontaktinių duomenų tipas | Contact type",
          "enum": [
            "email",
            "phone"
          ]
        }
      },
      "title": "Contact",
      "description": "Kontaktinių duomenų modelis | Contact data model"
    },
    "DocumentType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Dokumentų tipo Id | Document type Id"
        },
        "notes": {
          "type": "string",
          "description": "Dokumentų tipo pastabos | Document type notes"
        },
        "typeName": {
          "type": "string",
          "description": "Dokumentų tipo pavadinimas | Document type name"
        }
      },
      "title": "DocumentType",
      "description": "Dokumentų tipo modelis | Document type model"
    },
    "EnvelopeOfListOfAgePeriod": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgePeriod"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfAgePeriod"
    },
    "EnvelopeOfListOfAppointment": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Appointment"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfAppointment"
    },
    "EnvelopeOfListOfAppointmentHistory": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppointmentHistory"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfAppointmentHistory"
    },
    "EnvelopeOfListOfMedicalService": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MedicalService"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfMedicalService"
    },
    "EnvelopeOfListOfOrganization": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfOrganization"
    },
    "EnvelopeOfListOfPartner": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Partner"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfPartner"
    },
    "EnvelopeOfListOfPractitioner": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Practitioner"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfPractitioner"
    },
    "EnvelopeOfListOfProgramAppointment": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProgramAppointment"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfProgramAppointment"
    },
    "EnvelopeOfListOfProgramSlot": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProgramSlot"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfProgramSlot"
    },
    "EnvelopeOfListOfQueue": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Queue"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfQueue"
    },
    "EnvelopeOfListOfReception": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reception"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfReception"
    },
    "EnvelopeOfListOfReceptionParameter": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReceptionParameter"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfReceptionParameter"
    },
    "EnvelopeOfListOfReferral": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Referral"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfReferral"
    },
    "EnvelopeOfListOfRoom": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Room"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfRoom"
    },
    "EnvelopeOfListOfSlot": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Slot"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfSlot"
    },
    "EnvelopeOfListOfSlotGeneration": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlotGeneration"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfSlotGeneration"
    },
    "EnvelopeOfListOfSlotHistory": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlotHistory"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfSlotHistory"
    },
    "EnvelopeOfListOfSlotOffer": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlotOffer"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfSlotOffer"
    },
    "EnvelopeOfListOfSpeciality": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Speciality"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfSpeciality"
    },
    "EnvelopeOfListOfSpecialityService": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialityService"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfSpecialityService"
    },
    "EnvelopeOfListOfWorkplace": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Workplace"
          }
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      },
      "title": "EnvelopeOfListOfWorkplace"
    },
    "Links": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string"
        },
        "prev": {
          "type": "string"
        },
        "self": {
          "type": "string"
        }
      },
      "title": "Links"
    },
    "MaxPeriodForServiceProvision": {
      "type": "object",
      "properties": {
        "mltId": {
          "type": "integer",
          "format": "int64",
          "description": "Maksimalaus periodo id | Max period id"
        }
      },
      "title": "MaxPeriodForServiceProvision",
      "description": "Maksimalaus periodo paslaugai suteikti modelis | Maximum period to provide service model"
    },
    "MedicalService": {
      "type": "object",
      "properties": {
        "agePeriod": {
          "type": "array",
          "description": "Pacientu amžiaus klasifikatoriaus id sąrašas  | Patient age classifier id list",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "code": {
          "type": "string",
          "description": "Paslaugos klasifikatoriaus kodas  | Service classifier ID"
        },
        "description": {
          "type": "string",
          "description": "Klasifikatoriaus pavadinimas  | Classifier name"
        },
        "detailDescription": {
          "type": "string",
          "description": "Paslaugos detalesnis aprašymas | More detailed service description"
        },
        "hierarchyLevel": {
          "type": "integer",
          "format": "int32",
          "description": "Paslaugos herarchijos lygis | Service hierarchy level"
        },
        "maxPeriodForServiceProvision": {
          "description": "Maksimalus terminas paslaugos suteikimui  | Maximum period to provide a service",
          "$ref": "#/definitions/MaxPeriodForServiceProvision"
        },
        "parentService": {
          "type": "integer",
          "format": "int64",
          "description": "Nuoroda į tėvinė paslauga | Parent service"
        },
        "serviceCondition": {
          "type": "string",
          "description": "Paslaugos teikimo sąlygos | Conditions of service"
        },
        "serviceLevel": {
          "type": "string",
          "description": "Paslaugos lygis | Service level"
        },
        "sex": {
          "type": "string",
          "description": "Lytis | Sex"
        },
        "sortOfService": {
          "type": "string",
          "description": "Paslaugos rūšis | Type of service"
        },
        "speciality": {
          "type": "array",
          "description": "Specialisto kvalifikacijų kodu sąrašas | Practitioner speciality code list",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "description": "Klasifikatoriaus tipas  | Classifier type"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "description": "Nuo kada galioja klasifikatoriaus įrašas | When was classifier valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "description": "Iki kada galioja klasifikatoriaus įrašas | Until when is classifier valid"
        }
      },
      "title": "MedicalService",
      "description": "Sveikatos paslaugos modelis | Medical service model"
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-29 07:01:59",
          "description": "Sukūrimo data | Creation date"
        },
        "creatorId": {
          "type": "integer",
          "format": "int64",
          "example": 1005911364,
          "description": "Sukūrėjo id | Creator id"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time",
          "example": "2020-07-14 10:29:42",
          "description": "Atnaujinimo data | Update date"
        },
        "updaterId": {
          "type": "integer",
          "format": "int64",
          "example": 1005911364,
          "description": "Atnaujintojo id | Updater id"
        }
      },
      "title": "Metadata",
      "description": "Papildoma informacija | Additional information"
    },
    "Organization": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Įstaigos adresas | Organization address",
          "minLength": 0,
          "maxLength": 1000
        },
        "cid": {
          "type": "string",
          "description": "Vidinis įstaigos Id | Internal organization Id",
          "minLength": 0,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Įstaigos aprašymas | Organization description",
          "minLength": 0,
          "maxLength": 500
        },
        "fhirId": {
          "type": "integer",
          "format": "int64",
          "description": "FHIR Id"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Įstaigos Id | Organization Id"
        },
        "jaCode": {
          "type": "string",
          "description": "Juridinio asmens kodas | Juridical person code",
          "minLength": 0,
          "maxLength": 1024
        },
        "jaName": {
          "type": "string",
          "description": "Juridinio asmens pavadinimas | Juridical person name",
          "minLength": 0,
          "maxLength": 1024
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "organizationName": {
          "type": "string",
          "description": "Įstaigos pavadinimas | Organization name",
          "minLength": 0,
          "maxLength": 1024
        },
        "parentFhirId": {
          "type": "integer",
          "format": "int64",
          "description": "Tėvinės įstaigos FHIR Id | Parent organization FHIR Id"
        },
        "parentId": {
          "type": "integer",
          "format": "int64",
          "description": "Tėvinės įstaigos Id | Parent organization Id"
        },
        "parentJaName": {
          "type": "string",
          "description": "Tėvinės įstaigos juridinio asmens pavadinimas | Parent organization juridical person name",
          "minLength": 0,
          "maxLength": 1024
        },
        "sveidraId": {
          "type": "string",
          "description": "Sveikatos draudimo Id | Health insurance Id",
          "minLength": 0,
          "maxLength": 1024
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "description": "Data nuo kurios galima naudoti įstaigą | Date when organization is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "description": "Data iki kurios galima naudoti įstaigą| Date until organization is valid"
        }
      },
      "title": "Organization",
      "description": "Įstaigos modelis | Organization model"
    },
    "OrganizationUpdateRequest": {
      "type": "object",
      "properties": {
        "cid": {
          "type": "string",
          "description": "Vidinis įstaigos Id | Internal organization Id",
          "minLength": 0,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Įstaigos aprašymas | Organization description",
          "minLength": 0,
          "maxLength": 500
        },
        "organizationName": {
          "type": "string",
          "description": "Įstaigos pavadinimas | Organization name",
          "minLength": 0,
          "maxLength": 1024
        }
      },
      "title": "OrganizationUpdateRequest",
      "description": "Įstaigos atnaujinimo užklausa | Organization update request"
    },
    "Participant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Dalyvio id | Participant id"
        },
        "name": {
          "type": "string",
          "description": "Dalyvio vardas | Participant name"
        },
        "surname": {
          "type": "string",
          "description": "Dalyvio pavardė | Participant surname"
        },
        "type": {
          "type": "string",
          "description": "Tipas | Type",
          "enum": [
            "PATIENT",
            "PRACTITIONER"
          ]
        }
      },
      "title": "Participant",
      "description": "Dalyvio modelis | Participant model"
    },
    "Partner": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "description": "Partnerinės įstaigos Id | Partner organization Id"
        },
        "organizationName": {
          "type": "string",
          "description": "Partnerinės įstaigos pavadinimas | Partner organization name"
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "description": "Talono Id | Slot Id"
        }
      },
      "title": "Partner",
      "description": "Partnerio modelis | Partner model"
    },
    "Patient": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Paciento amžius | Patient age"
        },
        "contacts": {
          "type": "array",
          "description": "Paciento kontaktai | Patient contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date",
          "example": "2000-03-17",
          "description": "Paciento gimimo data | Date of birth of the patient"
        },
        "dateOfDeath": {
          "type": "string",
          "format": "date",
          "example": "2001-09-30",
          "description": "Paciento mirties data | Date of death of the patient"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento id | Patient id"
        },
        "insuranceId": {
          "type": "string",
          "description": "Paciento draudimo id | Patient insurance id"
        },
        "name": {
          "type": "string",
          "description": "Paciento vardas | Patient name"
        },
        "patientEsiId": {
          "type": "string",
          "description": "Paciento ESI identifikatorius | Patient ESI identifier"
        },
        "personalCode": {
          "type": "string",
          "description": "Paciento asmens kodas | Patient personal code"
        },
        "sex": {
          "type": "string",
          "description": "Paciento lytis | Patient sex"
        },
        "surname": {
          "type": "string",
          "description": "Paciento pavardė | Patient surname"
        }
      },
      "title": "Patient",
      "description": "Paciento modelis | Patient model"
    },
    "PatientAppointment": {
      "type": "object",
      "required": [
        "start"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 2114,
          "description": "Registracijos identifikatorius | Appointment identifier"
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos identifikatorius | Medical service identifier"
        },
        "medicalServiceName": {
          "type": "string",
          "description": "Paslaugos pavadinimas | Medical service name"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "description": "Įstaigos identifikatorius | Organization identifier"
        },
        "organizationName": {
          "type": "string",
          "description": "Įstaigos pavadinimas | Organization name"
        },
        "practitionerId": {
          "type": "integer",
          "format": "int64",
          "description": "Specialisto identifikatorius | Practitioner identifier"
        },
        "practitionerName": {
          "type": "string",
          "description": "Specialisto vardas | Practitioner name"
        },
        "practitionerSurname": {
          "type": "string",
          "description": "Specialisto pavardė | Practitioner surname"
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "example": 86253,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 17:59:24",
          "description": "Registracijos pradžios data ir laikas | Appointment start date and time"
        }
      },
      "title": "PatientAppointment",
      "description": "Paciento registracija | Patient appointment"
    },
    "Practitioner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Specialisto id | Practitioner id"
        },
        "licenseId": {
          "type": "string",
          "description": "Specialisto licencijos id  | Practitioner license id"
        },
        "name": {
          "type": "string",
          "description": "Specialisto vardas | Practitioner name"
        },
        "organizationAddress": {
          "type": "string",
          "description": "Organizacijos adresas | Organization adresas"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "description": "Organizacijos id | Organization id"
        },
        "organizationName": {
          "type": "string",
          "description": "Organizacijos paavdinimas | Organization name"
        },
        "speciality": {
          "description": "Specialisto kvalifikacija  | Practitioner speciality",
          "$ref": "#/definitions/Speciality"
        },
        "surname": {
          "type": "string",
          "description": "Specialisto pavardė | Practitioner surname"
        }
      },
      "title": "Practitioner",
      "description": "Specialisto modelis | Practitioner model"
    },
    "ProgramAppointment": {
      "type": "object",
      "required": [
        "slotStart"
      ],
      "properties": {
        "cancellationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-25 09:00:00",
          "description": "Data ir laikas, kada dėl reikiamų kriterijų neatitikimo registracija buvo atmesta specialisto | Date and time the appointment was cancelled by a practitioner due to non-compliance with the required criteria"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 2114,
          "description": "Registracijos identifikatorius | Appointment identifier"
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos kodas | Medical service code",
          "minLength": 0,
          "maxLength": 30
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "description": "Įstaigos identifikatorius | Organization identifier"
        },
        "patientId": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento identifikatorius | Patient identifier"
        },
        "registrationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-23 14:00:12",
          "description": "Data ir laikas, kada pacientas buvo užregistruotas | Date and time the patient was registered"
        },
        "registrationStatus": {
          "type": "string",
          "description": "Registracijos būklė | Registration status",
          "enum": [
            "Cancelled",
            "Registered"
          ]
        },
        "registrationStatusReason": {
          "type": "string",
          "description": "Registracijos būklės priežastis | Registration status reason"
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "example": 86253,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        },
        "slotStart": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 17:59:24",
          "description": "Vizito pradžios data ir laikas | Slot start date and time"
        }
      },
      "title": "ProgramAppointment",
      "description": "Programos registracija | Program appointment"
    },
    "ProgramAppointmentCreationRequest": {
      "type": "object",
      "properties": {
        "appointmentContacts": {
          "type": "array",
          "example": [
            {
              "contactInfo": 37060000000,
              "contactType": "phone"
            },
            {
              "contactInfo": "test@gmail.com",
              "contactType": "email"
            }
          ],
          "description": "Paciento registracijos kontaktiniai duomenys | Patients appointment contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos identifikatorius | Medical service identifier",
          "minLength": 0,
          "maxLength": 30
        },
        "patientId": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento identifikatorius | Patient identifier"
        },
        "practitionerComment": {
          "type": "string",
          "description": "Specialisto komentaras | Practitioner comment",
          "minLength": 0,
          "maxLength": 500
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "example": 86253,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        }
      },
      "title": "ProgramAppointmentCreationRequest",
      "description": "Programos registracijos sukūrimo užklausa | Program appointment creation request"
    },
    "ProgramSlot": {
      "type": "object",
      "required": [
        "end",
        "start",
        "typeCode",
        "visibilityCodes"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Vizito aprašymas | Slot description",
          "minLength": 0,
          "maxLength": 1000
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 18:59:24",
          "description": "Pabaigos data ir laikas | End date and time"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 68921,
          "description": "Vizito identifikatorius, unikalus visų IPR vizitų sąraše | Slot identifier which is unique in the list of all IPR slots"
        },
        "medicalServiceCodes": {
          "type": "array",
          "example": [
            2379,
            2350
          ],
          "description": "Paslaugų kodai. Turi būti iš paslaugų, aprašytų vizito darbo vietoje | Medical service codes. Must be from the medical services allowed for the workplace of the slot",
          "items": {
            "type": "string"
          }
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 1000139194,
          "description": "Organizacijos identifikatorius | Organization identifier"
        },
        "practitionerId": {
          "type": "integer",
          "format": "int64",
          "example": 44,
          "description": "Specialisto identifikatorius | Practitioner identifier"
        },
        "publicationStart": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 20:00:00",
          "description": "Publikavimo pradžios data ir laikas | Publication start date and time"
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "example": 44,
          "description": "Registratūros identifikatorius | Reception identifier"
        },
        "roomNo": {
          "type": "string",
          "description": "Kambario numeris | Room number"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 17:59:24",
          "description": "Pradžios data ir laikas | Start date and time"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Vizito tipo kodas | Slot type code"
        },
        "visibilityCodes": {
          "type": "array",
          "example": [
            "I",
            "R"
          ],
          "description": "Vizito matomumų kodai\nGalimos reikšmės:\n* I - matomas tik IPR viešoje paieškoje\n* R - matomas tik kai gauta užklausa iš registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto rolę turinčio naudotojo\n* G - matomas tik kai gauta užklausa iš nurodytoje gydymo įstaigoje dirbančio registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto\n\n\nSlot visibility codes\nAllowed values:\n* I - visible in public search only\n* R - visible for reception employees, healthcare practitioners, users with nursing and midwifery role only\n* G - visible for reception employees, healthcare practitioners, nursing and midwifery practitioners only\nI and G visibilities cannot be selected at once\n",
          "items": {
            "type": "string",
            "enum": [
              "G",
              "I",
              "R"
            ]
          }
        },
        "workplaceId": {
          "type": "integer",
          "format": "int64",
          "description": "Darbo vietos identifikatorius | Workplace identifier"
        }
      },
      "title": "ProgramSlot",
      "description": "Programos vizitas | Program slot"
    },
    "Queue": {
      "type": "object",
      "required": [
        "cancellationId",
        "cancellationReason",
        "doesNeedReferral",
        "inQueueFrom",
        "isPayed",
        "medicalServiceCode",
        "notificationReceiverId",
        "patientsComplaint",
        "serviceLevelAttribute",
        "specialityCode",
        "typeCode"
      ],
      "properties": {
        "cancellationDate": {
          "type": "string",
          "format": "date",
          "example": "2020-12-01 18:00:00",
          "description": "Laukimo eilėje atšaukimo data ir laikas | Date and time when waiting in queue was canceled"
        },
        "cancellationId": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Eilės elemento atšaukimo priežasties identifikatorius | Queue element cancellation reason identifier"
        },
        "cancellationReason": {
          "type": "string",
          "example": 221236,
          "description": "Atšaukimo priežasties įvedamas tekstas | Entered cancellation reason text"
        },
        "cid": {
          "type": "string",
          "example": "123-456",
          "description": "Eilės elemento vidinis identifikatorius įstaigoje | Internal queue element identifier at the organization"
        },
        "doesNeedReferral": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 5877,
          "description": "Eilės elemento identifikatorius | Queue element identifier"
        },
        "inQueueFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 18:00:00",
          "description": "Pradžios data ir laikas nuo kada laukiama eilėje | Date and time from which started to wait in queue"
        },
        "inQueueTill": {
          "type": "string",
          "format": "date-time",
          "example": "2020-12-01 18:00:00",
          "description": "Pabaigos data ir laikas iki kada laukiama eilėje | End date and time from which stopped waiting in queue"
        },
        "isESPBIReferral": {
          "type": "boolean",
          "description": "Ar siuntimas yra elektrinis is ESPBI | Is referral electronic from ESPBI"
        },
        "isPayed": {
          "type": "string",
          "example": "N",
          "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[FPN]",
          "enum": [
            "F",
            "N",
            "P"
          ]
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos kodas. | Medical service code."
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "notificationReceiverId": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento kuris gaus informacinius pranešimus apie eilės elemento būsenos pasikeitimus identifikatorius | Patients id who will receive notifications on queue element status changes"
        },
        "patient": {
          "description": "Pacientas | Patient",
          "$ref": "#/definitions/Patient"
        },
        "patientsComplaint": {
          "type": "string",
          "description": "Paciento nusiskundimas | Patient comment"
        },
        "practitionerComment": {
          "type": "string",
          "description": "Specialisto komentaras | Practitioner comment"
        },
        "queueContacts": {
          "type": "array",
          "description": "Eilės kontaktai | Queue contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "description": "Registratūros Id | Reception Id"
        },
        "referral": {
          "description": "Registracijos siuntimas | Appointment referral",
          "$ref": "#/definitions/Referral"
        },
        "registrationStatus": {
          "type": "integer",
          "format": "int64",
          "description": "Registracijos statusas | Registration status"
        },
        "serviceLevelAttribute": {
          "type": "integer",
          "format": "int64",
          "example": 2,
          "description": "Kokiam paslaugos lygiui yra skirtas eilės elementas\nGalimos reikšmės:\n* 0 - nenustatytas\n* 1 - pirminis\n* 2 - antrinis\n* 3 - tretinis\n\n\nWhat level of service this queue element is for\nAllowed values:\n* 0 - unspecified\n* 1 - primary\n* 2 - secondary\n* 3 - tertiary\n",
          "minimum": 0,
          "maximum": 9223372036854776000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "specialityCode": {
          "type": "string",
          "example": 221236,
          "description": "Specialybės kodas | Speciality code"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Eilės tipo kodas | Queue type code"
        },
        "visitId": {
          "type": "integer",
          "format": "int64",
          "description": "Priskirto talono id. Kol nepriskirta eilei talonas reikšmė lygi null | Assigned slot id. The value is null while slot is not assigned"
        }
      },
      "title": "Queue",
      "description": "Eilės modelis | Queue model"
    },
    "Reception": {
      "type": "object",
      "properties": {
        "autoAssign": {
          "type": "integer",
          "format": "int32",
          "description": "Kiek valandų iki registracijos pradžios automatiškai priskiriama registracija laukiančiam pacientui | Hours until registration is automatically assigned to a waiting patient"
        },
        "cid": {
          "type": "string",
          "description": "Vidinis registratūros Id | Internal reception Id",
          "minLength": 0,
          "maxLength": 300
        },
        "contactInfo": {
          "type": "string",
          "example": "test",
          "description": "Kontaktinė informacija | Contact information",
          "minLength": 0,
          "maxLength": 300
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Registratūros Id | Reception Id"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 34,
          "description": "Įstaigos Id | Organization Id"
        },
        "phoneNumber": {
          "type": "string",
          "example": "test",
          "description": "Telefonų numeriai | Phone numbers",
          "minLength": 0,
          "maxLength": 300
        },
        "receptionName": {
          "type": "string",
          "description": "Registratūros pavadinimas | Reception name",
          "minLength": 0,
          "maxLength": 300
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2000-01-01",
          "description": "Data nuo kada galima naudoti šią registratūra | Date when reception is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "description": "Data iki kada galima naudoti šią registratūra | Date until reception is valid"
        }
      },
      "title": "Reception",
      "description": "Registratūros modelis | Reception model"
    },
    "ReceptionCreationRequest": {
      "type": "object",
      "properties": {
        "autoAssign": {
          "type": "integer",
          "format": "int32",
          "description": "Kiek valandų iki registracijos pradžios automatiškai priskiriama registracija laukiančiam pacientui | Hours until registration is automatically assigned to a waiting patient"
        },
        "cid": {
          "type": "string",
          "description": "Vidinis registratūros Id | Internal reception Id",
          "minLength": 0,
          "maxLength": 300
        },
        "contactInfo": {
          "type": "string",
          "example": "test",
          "description": "Kontaktinė informacija | Contact information",
          "minLength": 0,
          "maxLength": 300
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 34,
          "description": "Įstaigos Id | Organization Id"
        },
        "phoneNumber": {
          "type": "string",
          "example": "test",
          "description": "Telefonų numeriai | Phone numbers",
          "minLength": 0,
          "maxLength": 300
        },
        "receptionName": {
          "type": "string",
          "description": "Registratūros pavadinimas | Reception name",
          "minLength": 0,
          "maxLength": 300
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2000-01-01",
          "description": "Data nuo kada galima naudoti šią registratūra | Date when reception is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "description": "Data iki kada galima naudoti šią registratūra | Date until reception is valid"
        }
      },
      "title": "ReceptionCreationRequest",
      "description": "Registratūros sukūrimo užklausa | Reception creation request"
    },
    "ReceptionParameter": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "note": {
          "type": "string",
          "description": "Pastaba | Note"
        },
        "parameterName": {
          "type": "string",
          "description": "Parametro pavadinimas | Parameter name\n### Galimos reišmės | Valid values\n* notificationsBySms - Ar siųsti priminimus SMS? | Send notifications by SMS?\n* notificationsByEmail - Ar siųsti priminimus el. paštu? | Send notifications by email?\n* mandatoryPhone - Ar registracijos metu yra privalomas telefono numeris? | Is phone number required while booking slots?\n* mandatoryEmail - Ar siųsti priminimus SMS? | Is email required while booking slots?\n* automaticQueues - Ar registratūroje eilės gali būti automatiškai tvarkomos? | Can reception queues be managed automatically?\n",
          "enum": [
            "automaticQueues",
            "mandatoryEmail",
            "mandatoryPhone",
            "notificationsByEmail",
            "notificationsBySms"
          ]
        },
        "parameterValue": {
          "type": "boolean",
          "description": "Parametro reikšmė | Parameter value"
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "description": "Registratūros Id | Reception Id"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-09-09",
          "description": "Data nuo kada galima naudoti šį parametrą | Date when parameter is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2020-10-10",
          "description": "Data iki kada galima naudoti šį parametrą | Date until parameter is valid"
        }
      },
      "title": "ReceptionParameter",
      "description": "Registratūros parametrų modelis | Reception parameters model"
    },
    "ReceptionParameterCreationRequest": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string",
          "description": "Pastaba | Note",
          "minLength": 0,
          "maxLength": 1000
        },
        "parameterName": {
          "type": "string",
          "description": "Parametro pavadinimas | Parameter name\n### Galimos reišmės | Valid values\n* notificationsBySms - Ar siųsti priminimus SMS? | Send notifications by SMS?\n* notificationsByEmail - Ar siųsti priminimus el. paštu? | Send notifications by email?\n* mandatoryPhone - Ar registracijos metu yra privalomas telefono numeris? | Is phone number required while booking slots?\n* mandatoryEmail - Ar siųsti priminimus SMS? | Is email required while booking slots?\n* automaticQueues - Ar registratūroje eilės gali būti automatiškai tvarkomos? | Can reception queues be managed automatically?\n",
          "enum": [
            "automaticQueues",
            "mandatoryEmail",
            "mandatoryPhone",
            "notificationsByEmail",
            "notificationsBySms"
          ]
        },
        "parameterValue": {
          "type": "boolean",
          "description": "Parametro reikšmė | Parameter value"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-09-09",
          "description": "Data nuo kada galima naudoti šį parametrą | Date when parameter is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2020-10-10",
          "description": "Data iki kada galima naudoti šį parametrą | Date until parameter is valid"
        }
      },
      "title": "ReceptionParameterCreationRequest",
      "description": "Registratūros parametrų sukūrimo užklausa | Reception parameters creation request"
    },
    "ReceptionParameterUpdateRequest": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string",
          "description": "Pastaba | Note",
          "minLength": 0,
          "maxLength": 1000
        },
        "parameterValue": {
          "type": "boolean",
          "description": "Parametro reikšmė | Parameter value"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-09-09",
          "description": "Data nuo kada galima naudoti šį parametrą | Date when parameter is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2020-10-10",
          "description": "Data iki kada galima naudoti šį parametrą | Date until parameter is valid"
        }
      },
      "title": "ReceptionParameterUpdateRequest",
      "description": "Registratūros parametrų atnaujinimo užklausa | Reception parameters update request"
    },
    "ReceptionUpdateRequest": {
      "type": "object",
      "properties": {
        "autoAssign": {
          "type": "integer",
          "format": "int32",
          "description": "Kiek valandų iki registracijos pradžios automatiškai priskiriama registracija laukiančiam pacientui | Hours until registration is automatically assigned to a waiting patient"
        },
        "contactInfo": {
          "type": "string",
          "example": "test",
          "description": "Kontaktinė informacija | Contact information",
          "minLength": 0,
          "maxLength": 300
        },
        "phoneNumber": {
          "type": "string",
          "example": "test",
          "description": "Telefonų numeriai | Phone numbers",
          "minLength": 0,
          "maxLength": 300
        },
        "receptionName": {
          "type": "string",
          "description": "Registratūros pavadinimas | Reception name",
          "minLength": 0,
          "maxLength": 300
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2000-01-01",
          "description": "Data nuo kada galima naudoti šią registratūra | Date when reception is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "description": "Data iki kada galima naudoti šią registratūra | Date until reception is valid"
        }
      },
      "title": "ReceptionUpdateRequest",
      "description": "Registratūros atnaujinimo užklausa | Reception update request"
    },
    "Referral": {
      "type": "object",
      "properties": {
        "compositionId": {
          "type": "integer",
          "format": "int64",
          "example": 1002440277,
          "description": "Siuntimo composition identifikatorius FHIR | Referral composition FHIR identifier"
        },
        "diagnosisCode": {
          "type": "string",
          "example": "J20",
          "description": "Diagnozės kodas | Diagnosis code",
          "minLength": 0,
          "maxLength": 250
        },
        "diagnosisName": {
          "type": "string",
          "example": "Ūminis bronchitas",
          "description": "Diagnozės pavadinimmas | Diagnosis name",
          "minLength": 0,
          "maxLength": 250
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 221,
          "description": "Siuntimo identifikatorius IPR struktūroje | Referral identifier in the IPR structure"
        },
        "isUsed": {
          "type": "boolean",
          "example": false,
          "description": "Ar siuntimas yra panaudotas IPR struktūroje | Whether the referral is used in the IPR structure"
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2352,
          "description": "Paslaugos kodas | Medical service code",
          "minLength": 0,
          "maxLength": 30
        },
        "metadata": {
          "description": "Objekto metaduomenys | Object metadata",
          "$ref": "#/definitions/Metadata"
        },
        "patientId": {
          "type": "integer",
          "format": "int64",
          "example": 1002402541,
          "description": "Paciento identifikatorius | Patient identifier"
        },
        "receiver": {
          "type": "string",
          "description": "Informacija apie gavėją\nReikšmių pavyzdžiai:\n* <null/tuščia> (nėra užpildyta)\n* Dietologas\n* Gydytojas radiologas\n* Gydytojas alergologas ir klinikinis imunologas\n* Patologinio tyrimo metodas: Autopsija.\n* Patologinio tyrimo metodas: Biopsija.\n\n\nThe receiver or more\nExample values:\n* <null/empty> (no data)\n* ...\n",
          "minLength": 0,
          "maxLength": 1000
        },
        "receiverSpeciality": {
          "type": "string",
          "description": "Gavėjo kvalifikacija\nReikšmių pavyzdžiai:\n* <null/tuščia> (nėra užpildyta)\n* Gydytojas vaikų ir paauglių psichiatras\n* Sporto medicinos gydytojas\n\n\nSpeciality of the receiver\nExample values:\n* <null/empty> (no data)\n* ...\n",
          "minLength": 0,
          "maxLength": 200
        },
        "receiverSpecialityCode": {
          "type": "string",
          "description": "Gavėjo kvalifikacijos kodas\nReikšmių pavyzdžiai:\n* <null/tuščia> (nėra užpildyta)\n* 221260\n* 221263\n\n\nSpeciality of the receiver\"\nExample values:\n* <null/empty> (no data)\n* ...\n",
          "minLength": 0,
          "maxLength": 50
        },
        "resourceId": {
          "type": "integer",
          "format": "int64",
          "example": 1002440135,
          "description": "Siuntimo resource identifikatorius FHIR | Referral resource FHIR identifier"
        },
        "senderNotes": {
          "type": "string",
          "example": "abcde _ 12345",
          "description": "Siunčiančio specialisto pastabos | Sender practitioner notes",
          "minLength": 0,
          "maxLength": 2500
        },
        "senderOrganizationId": {
          "type": "integer",
          "format": "int64",
          "example": 1000138573,
          "description": "Siunčiančios organizacijos identifikatorius | Sender organization identifier"
        },
        "senderOrganizationName": {
          "type": "string",
          "example": "Viešoji įstaiga Kybartų pirminės sveikatos priežiūros centras",
          "description": "Siunčiančios organizacijos pavadinimas | Sender organization name",
          "minLength": 0,
          "maxLength": 1024
        },
        "serviceLevelAttribute": {
          "type": "string",
          "example": 2,
          "description": "Kokiam paslaugos lygiui yra skirtas vizitas\nGalimos reikšmės:\n* 0 - nenustatytas\n* 1 - pirminis\n* 2 - antrinis\n* 3 - tretinis\n\n\nWhat level of service this slot is for\nAllowed values:\n* 0 - unspecified\n* 1 - primary\n* 2 - secondary\n* 3 - tertiary\n",
          "pattern": "[0123]",
          "enum": [
            "0",
            "1",
            "2",
            "3"
          ]
        }
      },
      "title": "Referral",
      "description": "Siuntimo modelis | Referral model"
    },
    "ReferralAssignmentRequest": {
      "type": "object",
      "properties": {
        "compositionId": {
          "type": "integer",
          "format": "int64",
          "example": 1002440277,
          "description": "Siuntimo composition identifikatorius FHIR | Referral composition FHIR identifier"
        },
        "diagnosisCode": {
          "type": "string",
          "example": "J20",
          "description": "Diagnozės kodas | Diagnosis code",
          "minLength": 0,
          "maxLength": 250
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2352,
          "description": "Paslaugos kodas | Medical service code",
          "minLength": 0,
          "maxLength": 30
        },
        "receiverSpecialityCode": {
          "type": "string",
          "description": "Gavėjo kvalifikacijos kodas\nReikšmių pavyzdžiai:\n* <null/tuščia> (nėra užpildyta)\n* 221260\n* 221263\n\n\nSpeciality of the receiver\"\nExample values:\n* <null/empty> (no data)\n* ...\n",
          "minLength": 0,
          "maxLength": 50
        },
        "resourceId": {
          "type": "integer",
          "format": "int64",
          "example": 1002440135,
          "description": "Siuntimo resource identifikatorius FHIR | Referral resource FHIR identifier"
        },
        "senderOrganizationId": {
          "type": "integer",
          "format": "int64",
          "example": 1000138573,
          "description": "Siunčiančios organizacijos identifikatorius | Sender organization identifier"
        },
        "serviceLevelAttribute": {
          "type": "string",
          "example": 2,
          "description": "Kokiam paslaugos lygiui yra skirtas vizitas\nGalimos reikšmės:\n* 0 - nenustatytas\n* 1 - pirminis\n* 2 - antrinis\n* 3 - tretinis\n\n\nWhat level of service this slot is for\nAllowed values:\n* 0 - unspecified\n* 1 - primary\n* 2 - secondary\n* 3 - tertiary\n",
          "pattern": "[0123]",
          "enum": [
            "0",
            "1",
            "2",
            "3"
          ]
        }
      },
      "title": "ReferralAssignmentRequest",
      "description": "Siuntimo susiejimo užklausa | Referral assignment request"
    },
    "RegistrationToQueueRequest": {
      "type": "object",
      "required": [
        "doesNeedReferral",
        "inQueueFrom",
        "isPayed",
        "medicalServiceCode",
        "notificationReceiverId",
        "patientsComplaint",
        "serviceLevelAttribute",
        "typeCode"
      ],
      "properties": {
        "cid": {
          "type": "string",
          "example": "123-456",
          "description": "Eilės elemento vidinis identifikatorius įstaigoje | Internal queue element identifier at the organization",
          "minLength": 0,
          "maxLength": 300
        },
        "doesNeedReferral": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "inQueueFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 18:00:00",
          "description": "Pradžios data ir laikas nuo kada laukiama eilėje | Date and time from which started to wait in queue"
        },
        "inQueueTill": {
          "type": "string",
          "format": "date-time",
          "example": "2020-12-01 18:00:00",
          "description": "Pabaigos data ir laikas iki kada laukiama eilėje | End date and time from which stopped waiting in queue"
        },
        "isPayed": {
          "type": "string",
          "example": "N",
          "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[FPN]",
          "enum": [
            "F",
            "N",
            "P"
          ]
        },
        "medicalServiceCode": {
          "type": "string",
          "example": 2379,
          "description": "Paslaugos kodas. | Medical service code.",
          "minLength": 0,
          "maxLength": 30
        },
        "notificationReceiverId": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento kuris gaus informacinius pranešimus apie eilės elemento būsenos pasikeitimus identifikatorius | Patients id who will receive notifications on queue element status changes"
        },
        "patient": {
          "$ref": "#/definitions/Patient"
        },
        "patientId": {
          "type": "integer",
          "format": "int64",
          "description": "Paciento identifikatorius | Patient identifier"
        },
        "patientsComplaint": {
          "type": "string",
          "description": "Paciento nusiskundimas | Patient comment",
          "minLength": 0,
          "maxLength": 300
        },
        "practitionerComment": {
          "type": "string",
          "description": "Specialisto komentaras | Practitioner comment",
          "minLength": 0,
          "maxLength": 300
        },
        "queueContacts": {
          "type": "array",
          "description": "Eilės kontaktai | Queue contacts",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "serviceLevelAttribute": {
          "type": "integer",
          "format": "int64",
          "example": 2,
          "description": "Kokiam paslaugos lygiui yra skirtas eilės elementas\nGalimos reikšmės:\n* 0 - nenustatytas\n* 1 - pirminis\n* 2 - antrinis\n* 3 - tretinis\n\n\nWhat level of service this queue element is for\nAllowed values:\n* 0 - unspecified\n* 1 - primary\n* 2 - secondary\n* 3 - tertiary\n",
          "minimum": 0,
          "maximum": 9223372036854776000,
          "exclusiveMinimum": false,
          "exclusiveMaximum": false,
          "enum": [
            0,
            1,
            2,
            3
          ]
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Eilės tipo kodas | Queue type code",
          "minLength": 0,
          "maxLength": 5
        }
      },
      "title": "RegistrationToQueueRequest",
      "description": "Registracijos eilei užklausa | Registration to queue request"
    },
    "RolePatchRequest": {
      "type": "object",
      "properties": {
        "isManager": {
          "type": "boolean",
          "description": "Ar specialistui priklauso direktoriaus rolė | Does practitioner have the manager role"
        },
        "isRegistrator": {
          "type": "boolean",
          "description": "Ar specialistui priklauso registratoriaus rolė | Does practitioner have the registrator role"
        }
      },
      "title": "RolePatchRequest",
      "description": "Specialisto rolių pakeitimo užklausa | Practitioner role patch request"
    },
    "Roles": {
      "type": "object",
      "properties": {
        "isManager": {
          "type": "boolean",
          "description": "Ar specialistui priklauso direktoriaus rolė | Does practitioner have the manager role"
        },
        "isRegistrator": {
          "type": "boolean",
          "description": "Ar specialistui priklauso registratoriaus rolė | Does practitioner have the registrator role"
        },
        "practitionerId": {
          "type": "integer",
          "format": "int64",
          "description": "Specialisto Id | Practitioner Id"
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "description": "Registratūros Id | Reception Id"
        }
      },
      "title": "Roles",
      "description": "Specialisto rolių modelis | Practitioner role model"
    },
    "Room": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Kabineto adresas | Room address"
        },
        "cid": {
          "type": "string",
          "description": "Vidinis kabineto id(keisti reikšmę galima tik ieškant pagal id) | Internal room id(changes to value allowed only when searching by id)"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Kabineto id | Room id",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Kabineto pavadinimas | Room name"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 34,
          "description": "Įstaigos id | Organization id"
        },
        "phone": {
          "type": "string",
          "description": "Kabineto telefono numeris | Room phone number"
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "example": 44,
          "description": "Registratūros id | Reception id"
        },
        "roomNumber": {
          "type": "string",
          "example": "111A",
          "description": "Kabineto numeris | Room number"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-09-09",
          "description": "Data nuo kurios galima naudoti šį kabinetą | Date when room is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2020-10-10",
          "description": "Data iki kurios galima naudoti šį kabinetą | Date until room is valid"
        }
      },
      "title": "Room",
      "description": "Kabineto modelis | Room model"
    },
    "RoomCreationRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Kabineto adresas | Room address",
          "minLength": 0,
          "maxLength": 300
        },
        "cid": {
          "type": "string",
          "description": "Vidinis kabineto id(keisti reikšmę galima tik ieškant pagal id) | Internal room id(changes to value allowed only when searching by id)",
          "minLength": 0,
          "maxLength": 300
        },
        "name": {
          "type": "string",
          "description": "Kabineto pavadinimas | Room name",
          "minLength": 0,
          "maxLength": 300
        },
        "phone": {
          "type": "string",
          "description": "Kabineto telefono numeris | Room phone number",
          "minLength": 0,
          "maxLength": 50
        },
        "roomNumber": {
          "type": "string",
          "example": "111A",
          "description": "Kabineto numeris | Room number",
          "minLength": 0,
          "maxLength": 50
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-09-09",
          "description": "Data nuo kurios galima naudoti šį kabinetą | Date when room is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2020-10-10",
          "description": "Data iki kurios galima naudoti šį kabinetą | Date until room is valid"
        }
      },
      "title": "RoomCreationRequest",
      "description": "Kabineto sukūrimo užklausa | Room creation request"
    },
    "RoomUpdateRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "Kabineto adresas | Room address",
          "minLength": 0,
          "maxLength": 300
        },
        "cid": {
          "type": "string",
          "description": "Vidinis kabineto id(keisti reikšmę galima tik ieškant pagal id) | Internal room id(changes to value allowed only when searching by id)",
          "minLength": 0,
          "maxLength": 300
        },
        "name": {
          "type": "string",
          "description": "Kabineto pavadinimas | Room name",
          "minLength": 0,
          "maxLength": 300
        },
        "phone": {
          "type": "string",
          "description": "Kabineto telefono numeris | Room phone number",
          "minLength": 0,
          "maxLength": 50
        },
        "roomNumber": {
          "type": "string",
          "example": "111A",
          "description": "Kabineto numeris | Room number",
          "minLength": 0,
          "maxLength": 50
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-09-09",
          "description": "Data nuo kurios galima naudoti šį kabinetą | Date when room is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2020-10-10",
          "description": "Data iki kurios galima naudoti šį kabinetą | Date until room is valid"
        }
      },
      "title": "RoomUpdateRequest",
      "description": "Kabineto atnaujinimo užklausa | Room update request"
    },
    "Slot": {
      "type": "object",
      "required": [
        "cId",
        "end",
        "isApprovalRequired",
        "isGreenCorridorPriority",
        "isReferralRequired",
        "paymentAttribute",
        "serviceLevelAttribute",
        "start",
        "typeCode",
        "visibilityCodes",
        "workplaceId"
      ],
      "properties": {
        "cId": {
          "type": "string",
          "example": "100abc98-1",
          "description": "Talono vidinis identifikatorius įstaigoje | Internal slot identifier at the organization",
          "minLength": 0,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Vizito aprašymas | Slot description",
          "minLength": 0,
          "maxLength": 1000
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 18:59:24",
          "description": "Pabaigos data ir laikas | End date and time"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 68921,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        },
        "isApprovalRequired": {
          "type": "boolean",
          "description": "Ar paciento registracijai reikalingas įstaigos patvirtinimas | Whether the approval from the institution is required"
        },
        "isGreenCorridorPriority": {
          "type": "boolean",
          "description": "Ar talonas yra skirtas \"Žalio koridoriaus\" paslaugoms teikti | Whether the slot is intended to provide \"Green Corridor\" services"
        },
        "isReferralRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "isRegistered": {
          "type": "boolean",
          "description": "Ar talonui jau yra užregistruotas pacientas | Whether the slot is has a patient registered"
        },
        "isReserved": {
          "type": "boolean",
          "description": "Ar talonas jau paimtas kažkokio naudotojo registracijos pildymui | Whether the slot is reserved"
        },
        "medicalServiceCodes": {
          "type": "array",
          "example": [
            2379,
            2350
          ],
          "description": "Paslaugų kodai. Turi būti iš paslaugų, aprašytų talono darbo vietoje | Medical service codes. Must be from the medical services allowed for the workplace of the slot",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 1000139194,
          "description": "Organizacijos identifikatorius, kuriai priklauso darbo vieta, kuriai sukurtas talonas | Identifier of the organization that has the workplace for which a slot is created"
        },
        "partnerIds": {
          "type": "array",
          "example": [
            31
          ],
          "description": "Organizacijos, kurios gali registruoti pacientus šio talono pagrindu | Organizations that can register patients using this slot",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "paymentAttribute": {
          "type": "string",
          "example": "N",
          "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[FPN]",
          "enum": [
            "F",
            "N",
            "P"
          ]
        },
        "publicationStart": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 20:00:00",
          "description": "Publikavimo pradžios data ir laikas | Publication start date and time"
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "example": 44,
          "description": "Registratūros identifikatorius | Reception identifier"
        },
        "serviceLevelAttribute": {
          "type": "string",
          "example": 2,
          "description": "Kokiam paslaugos lygiui yra skirtas vizitas\nGalimos reikšmės:\n* 0 - nenustatytas\n* 1 - pirminis\n* 2 - antrinis\n* 3 - tretinis\n\n\nWhat level of service this slot is for\nAllowed values:\n* 0 - unspecified\n* 1 - primary\n* 2 - secondary\n* 3 - tertiary\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[0123]",
          "enum": [
            "0",
            "1",
            "2",
            "3"
          ]
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 17:59:24",
          "description": "Pradžios data ir laikas | Start date and time"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Vizito tipo kodas | Slot type code"
        },
        "visibilityCodes": {
          "type": "array",
          "example": [
            "I",
            "R"
          ],
          "description": "Talono matomumų kodai\nGalimos reikšmės:\n* I - matomas tik IPR viešoje paieškoje\n* R - matomas tik kai gauta užklausa iš registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto rolę turinčio naudotojo\n* G - matomas tik kai gauta užklausa iš nurodytoje gydymo įstaigoje dirbančio registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto\n\n\nSlot visibility codes\nAllowed values:\n* I - visible in public search only\n* R - visible for reception employees, healthcare practitioners, users with nursing and midwifery role only\n* G - visible for reception employees, healthcare practitioners, nursing and midwifery practitioners only\nI and G visibilities cannot be selected at once\n",
          "items": {
            "type": "string",
            "enum": [
              "G",
              "I",
              "R"
            ]
          }
        },
        "workplaceId": {
          "type": "integer",
          "format": "int64",
          "example": 309,
          "description": "Registratūros darbo vietos identifikatorius | Reception workplace identifier"
        }
      },
      "title": "Slot",
      "description": "Vizito laiko modelis | Slot model"
    },
    "SlotCreationRequest": {
      "type": "object",
      "required": [
        "cId",
        "end",
        "isApprovalRequired",
        "isGreenCorridorPriority",
        "isReferralRequired",
        "paymentAttribute",
        "serviceLevelAttribute",
        "start",
        "typeCode",
        "visibilityCodes",
        "workplaceId"
      ],
      "properties": {
        "cId": {
          "type": "string",
          "example": "100abc98-1",
          "description": "Talono vidinis identifikatorius įstaigoje | Internal slot identifier at the organization",
          "minLength": 0,
          "maxLength": 300
        },
        "description": {
          "type": "string",
          "description": "Vizito aprašymas | Slot description",
          "minLength": 0,
          "maxLength": 1000
        },
        "end": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 18:59:24",
          "description": "Pabaigos data ir laikas | End date and time"
        },
        "isApprovalRequired": {
          "type": "boolean",
          "description": "Ar paciento registracijai reikalingas įstaigos patvirtinimas | Whether the approval from the institution is required"
        },
        "isGreenCorridorPriority": {
          "type": "boolean",
          "description": "Ar talonas yra skirtas \"Žalio koridoriaus\" paslaugoms teikti | Whether the slot is intended to provide \"Green Corridor\" services"
        },
        "isReferralRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "medicalServiceCodes": {
          "type": "array",
          "example": [
            2379,
            2350
          ],
          "description": "Paslaugų kodai. Turi būti iš paslaugų, aprašytų talono darbo vietoje | Medical service codes. Must be from the medical services allowed for the workplace of the slot",
          "items": {
            "type": "string"
          }
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 1000139194,
          "description": "Organizacijos identifikatorius, kuriai priklauso darbo vieta, kuriai sukurtas talonas | Identifier of the organization that has the workplace for which a slot is created"
        },
        "partnerIds": {
          "type": "array",
          "example": [
            31
          ],
          "description": "Organizacijos, kurios gali registruoti pacientus šio talono pagrindu | Organizations that can register patients using this slot",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "paymentAttribute": {
          "type": "string",
          "example": "N",
          "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[FPN]",
          "enum": [
            "F",
            "N",
            "P"
          ]
        },
        "publicationStart": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 20:00:00",
          "description": "Publikavimo pradžios data ir laikas | Publication start date and time"
        },
        "serviceLevelAttribute": {
          "type": "string",
          "example": 2,
          "description": "Kokiam paslaugos lygiui yra skirtas vizitas\nGalimos reikšmės:\n* 0 - nenustatytas\n* 1 - pirminis\n* 2 - antrinis\n* 3 - tretinis\n\n\nWhat level of service this slot is for\nAllowed values:\n* 0 - unspecified\n* 1 - primary\n* 2 - secondary\n* 3 - tertiary\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[0123]",
          "enum": [
            "0",
            "1",
            "2",
            "3"
          ]
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 17:59:24",
          "description": "Pradžios data ir laikas | Start date and time"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Vizito tipo kodas | Slot type code",
          "minLength": 0,
          "maxLength": 5
        },
        "visibilityCodes": {
          "type": "array",
          "example": [
            "I",
            "R"
          ],
          "description": "Talono matomumų kodai\nGalimos reikšmės:\n* I - matomas tik IPR viešoje paieškoje\n* R - matomas tik kai gauta užklausa iš registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto rolę turinčio naudotojo\n* G - matomas tik kai gauta užklausa iš nurodytoje gydymo įstaigoje dirbančio registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto\n\n\nSlot visibility codes\nAllowed values:\n* I - visible in public search only\n* R - visible for reception employees, healthcare practitioners, users with nursing and midwifery role only\n* G - visible for reception employees, healthcare practitioners, nursing and midwifery practitioners only\nI and G visibilities cannot be selected at once\n",
          "items": {
            "type": "string",
            "enum": [
              "G",
              "I",
              "R"
            ]
          }
        },
        "workplaceId": {
          "type": "integer",
          "format": "int64",
          "example": 309,
          "description": "Registratūros darbo vietos identifikatorius | Reception workplace identifier"
        }
      },
      "title": "SlotCreationRequest",
      "description": "Vizito laiko sukūrimo užklausa | Slot creation request"
    },
    "SlotGeneration": {
      "type": "object",
      "required": [
        "daysOfWeek",
        "endDay",
        "generationStart",
        "generationStatus",
        "id",
        "isReferralRequired",
        "slotDuration",
        "startDay",
        "timeIntervalEnd",
        "timeIntervalStart",
        "typeCode",
        "workplaceId"
      ],
      "properties": {
        "daysOfWeek": {
          "type": "array",
          "description": "Kuriomis savaitės dienomis generuoti talonus | On which days of the week should slots be generated",
          "items": {
            "type": "string",
            "enum": [
              "FRIDAY",
              "MONDAY",
              "SATURDAY",
              "SUNDAY",
              "THURSDAY",
              "TUESDAY",
              "WEDNESDAY"
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Vizito aprašymas | Slot description",
          "minLength": 0,
          "maxLength": 1000
        },
        "endDay": {
          "type": "string",
          "example": "2022-11-20",
          "description": "Generavimo periodo pabaigos diena | Generation period end day"
        },
        "errorMessage": {
          "type": "string",
          "description": "Nepavykusio generavimo klaidos pranešimas | Unsuccessful generation error message"
        },
        "generationStart": {
          "type": "string",
          "format": "date-time",
          "description": "Generavimo pradžios data | Generation start date"
        },
        "generationStatus": {
          "type": "string",
          "description": "Generavimo būsena\nGalimos reikšmės:\n* 1 - generavimas užsakytas\n* 2 - generavimas pradėtas\n* 3 - generavimas pabaigtas\n* 4 - generavimas nesėkmingas\n\n\nGeneration status\nPossible values:\n* 1 - generation scheduled\n* 2 - generation started\n* 3 - generation finished\n* 4 - generation unsuccessful\n"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Talonų generavimo identifikatorius | Slot generation identifier"
        },
        "isPaymentRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikės mokėti už vizitą | Does a patient need to pay for the visit"
        },
        "isReferralRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "medicalServiceCodes": {
          "type": "array",
          "example": [
            2379,
            2350
          ],
          "description": "Paslaugų kodai. Turi būti iš paslaugų, aprašytų talono darbo vietoje | Medical service codes. Must be from the medical services allowed for the workplace of the slot",
          "items": {
            "type": "string"
          }
        },
        "slotDuration": {
          "type": "integer",
          "format": "int32",
          "example": 15,
          "description": "Talono trukmė minutėmis | Slot duration in minutes"
        },
        "startDay": {
          "type": "string",
          "example": "2022-11-19",
          "description": "Generavimo periodo pradžios diena | Generation period start day"
        },
        "timeIntervalEnd": {
          "type": "string",
          "example": "17:30",
          "description": "Generavimo laiko intervalo pabaiga | Generation time interval start"
        },
        "timeIntervalStart": {
          "type": "string",
          "example": "07:30",
          "description": "Generavimo laiko intervalo praždia | Generation time interval start"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Vizito tipo kodas | Slot type code"
        },
        "workplaceId": {
          "type": "integer",
          "format": "int64",
          "example": 309,
          "description": "Registratūros darbo vietos identifikatorius | Reception workplace identifier"
        }
      },
      "title": "SlotGeneration",
      "description": "Talonų generavimo modelis | Slot generation model"
    },
    "SlotGenerationRequest": {
      "type": "object",
      "required": [
        "daysOfWeek",
        "endDay",
        "isReferralRequired",
        "slotDuration",
        "startDay",
        "timeIntervalEnd",
        "timeIntervalStart",
        "typeCode",
        "visibilityCodes",
        "workplaceId"
      ],
      "properties": {
        "daysOfWeek": {
          "type": "array",
          "description": "Kuriomis savaitės dienomis generuoti talonus | On which days of the week should slots be generated",
          "items": {
            "type": "string",
            "enum": [
              "FRIDAY",
              "MONDAY",
              "SATURDAY",
              "SUNDAY",
              "THURSDAY",
              "TUESDAY",
              "WEDNESDAY"
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Vizito aprašymas | Slot description",
          "minLength": 0,
          "maxLength": 1000
        },
        "endDay": {
          "type": "string",
          "example": "2022-11-20",
          "description": "Generavimo periodo pabaigos diena | Generation period end day"
        },
        "isPaymentRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikės mokėti už vizitą | Does a patient need to pay for the visit"
        },
        "isReferralRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "medicalServiceCodes": {
          "type": "array",
          "example": [
            2379,
            2350
          ],
          "description": "Paslaugų kodai. Turi būti iš paslaugų, aprašytų talono darbo vietoje | Medical service codes. Must be from the medical services allowed for the workplace of the slot",
          "items": {
            "type": "string"
          }
        },
        "partnerIds": {
          "type": "array",
          "example": [
            31
          ],
          "description": "Organizacijos, kurios gali registruoti pacientus šio talono pagrindu. Privalomas, jei nurodytas G matomumas. | Organizations that can register patients using this slot. Required if G visibility is selected.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "slotDuration": {
          "type": "integer",
          "format": "int32",
          "example": 15,
          "description": "Talono trukmė minutėmis | Slot duration in minutes"
        },
        "startDay": {
          "type": "string",
          "example": "2022-11-19",
          "description": "Generavimo periodo pradžios diena | Generation period start day"
        },
        "timeIntervalEnd": {
          "type": "string",
          "example": "17:30",
          "description": "Generavimo laiko intervalo pabaiga | Generation time interval start"
        },
        "timeIntervalStart": {
          "type": "string",
          "example": "07:30",
          "description": "Generavimo laiko intervalo praždia | Generation time interval start"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Vizito tipo kodas | Slot type code",
          "minLength": 0,
          "maxLength": 5
        },
        "visibilityCodes": {
          "type": "array",
          "example": [
            "I",
            "R"
          ],
          "description": "Talono matomumų kodai\nGalimos reikšmės:\n* I - matomas IPR viešoje paieškoje\n* R - matomas kai gauta užklausa iš registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto rolę turinčio naudotojo\n* G - matomas kai gauta užklausa iš nurodytoje gydymo įstaigoje dirbančio registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto\nI ir G matomumai negali būti pasirinkti vienu metu\n\n\nSlot visibility codes\nAllowed values:\n* I - visible in public search\n* R - visible for reception employees, healthcare practitioners, users with nursing and midwifery role\n* G - visible for reception employees, healthcare practitioners, nursing and midwifery practitioners\nI and G visibilities cannot be selected at once\n",
          "items": {
            "type": "string",
            "enum": [
              "G",
              "I",
              "R"
            ]
          }
        },
        "workplaceId": {
          "type": "integer",
          "format": "int64",
          "example": 309,
          "description": "Registratūros darbo vietos identifikatorius | Reception workplace identifier"
        }
      },
      "title": "SlotGenerationRequest",
      "description": "Talonų generavimo užsakymo modelis | Slot generation request model"
    },
    "SlotHistory": {
      "type": "object",
      "required": [
        "id",
        "recordCreated"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 68921,
          "description": "Talono identifikatorius, unikalus visų IPR talonų sąraše | Slot identifier which is unique in the list of all IPR slots"
        },
        "participant": {
          "description": "Dalyvis | Participant",
          "$ref": "#/definitions/Participant"
        },
        "recordCreated": {
          "type": "integer",
          "format": "int64",
          "example": 68921,
          "description": "Įrašą sukūrusio asmnens identifikatorius | Record created by person ID"
        },
        "slotType": {
          "description": "Talono tipas | Slot type",
          "$ref": "#/definitions/SlotType"
        }
      },
      "title": "SlotHistory",
      "description": "Vizito laiko istorijos modelis | Slot history model"
    },
    "SlotOffer": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "actionChosenAt": {
          "type": "string",
          "format": "date-time",
          "example": "2019-09-23 09:42:29",
          "description": "Pasiūlymo priėmimo arba atmetimo data ir laikas | Date and time of acceptance or rejection of the offer"
        },
        "appointmentId": {
          "type": "integer",
          "format": "int64",
          "example": 2164,
          "description": "Registracijos identifikatorius | Appointment identifier"
        },
        "appointmentStateReasonCode": {
          "type": "string",
          "example": "RAPP",
          "description": "Registracijos būsenos priežasties kodas | Appointment state reason code",
          "minLength": 0,
          "maxLength": 5
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 182,
          "description": "Pasiūlymo talonui identifikatorius | Slot offer identifier"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "slotId": {
          "type": "integer",
          "format": "int64",
          "example": 89155,
          "description": "Talono identifikatorius | Slot identifier"
        },
        "waitingDuration": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Laukimo trukmė dienomis nuo sistemos pasiūlytos artimiausios datos iki registravimosi pas specialistą dienos | Waiting time in days from the earliest slot suggested by the system to the selected slot"
        }
      },
      "title": "SlotOffer",
      "description": "Pasiūlymo talonui modelis | Slot offer model"
    },
    "SlotPatch": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Vizito aprašymas | Slot description",
          "minLength": 0,
          "maxLength": 1000
        },
        "isReferralRequired": {
          "type": "boolean",
          "description": "Ar pacientui reikia turėti siuntimą | Whether the patient needs to have a referral"
        },
        "paymentAttribute": {
          "type": "string",
          "example": "N",
          "description": "Ar pacientui reikės mokėti už vizitą\nGalimos reikšmės:\n* F - taip\n* P - dalinai\n* N - ne\n\n\nWhether a patient needs to pay for the visit\nAllowed values:\n* F - yes\n* P - partially\n* N - no\n",
          "minLength": 1,
          "maxLength": 1,
          "pattern": "[FPN]",
          "enum": [
            "F",
            "N",
            "P"
          ]
        },
        "publicationStart": {
          "type": "string",
          "format": "date-time",
          "example": "2020-11-19 20:00:00",
          "description": "Publikavimo pradžios data ir laikas | Publication start date and time"
        },
        "typeCode": {
          "type": "string",
          "example": "B",
          "description": "Vizito tipo kodas | Slot type code",
          "minLength": 0,
          "maxLength": 5
        },
        "visibilityCodes": {
          "type": "array",
          "example": [
            "I",
            "R"
          ],
          "description": "Talono matomumų kodai\nGalimos reikšmės:\n* I - matomas tik IPR viešoje paieškoje\n* R - matomas tik kai gauta užklausa iš registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto rolę turinčio naudotojo\n* G - matomas tik kai gauta užklausa iš nurodytoje gydymo įstaigoje dirbančio registratoriaus, sveikatinimo specialisto, slaugos ir akušerijos specialisto\n\n\nSlot visibility codes\nAllowed values:\n* I - visible in public search only\n* R - visible for reception employees, healthcare practitioners, users with nursing and midwifery role only\n* G - visible for reception employees, healthcare practitioners, nursing and midwifery practitioners only\nI and G visibilities cannot be selected at once\n",
          "items": {
            "type": "string",
            "enum": [
              "G",
              "I",
              "R"
            ]
          }
        }
      },
      "title": "SlotPatch",
      "description": "Vizito laiko pakeitimo modelis | Slot patch model"
    },
    "SlotType": {
      "type": "object",
      "properties": {
        "typeCode": {
          "type": "string",
          "description": "Talonų tipo kodas | Slot type code"
        },
        "typeName": {
          "type": "string",
          "description": "Talonų tipo pavadinimas | Slot type name"
        }
      },
      "title": "SlotType",
      "description": "Talonų tipo modelis | Slot type model"
    },
    "Speciality": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Kvalifikacijos kodas | Speciality code"
        },
        "dateModified": {
          "type": "string",
          "format": "date",
          "description": "Paskutinio specialybės pakeitimo data | Date when specialty was last modified"
        },
        "description": {
          "type": "string",
          "description": "Kvalifikacijos pavadinimas | Speciality name"
        },
        "healthCareServiceCodes": {
          "type": "array",
          "description": "Sveikatos paslaugų kodai | Health care service codes",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Speciality",
      "description": "Specialisto kvalifikacijos modelis | Practitoner speciality model"
    },
    "SpecialityService": {
      "type": "object",
      "properties": {
        "healthCareServiceCode": {
          "type": "string",
          "description": "Sveikatos paslaugos kodas | Health care service code"
        },
        "healthCareServiceName": {
          "type": "string",
          "description": "Sveikatos paslaugos pavadinimas | Health care service name"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Specialybės paslaugos id | Speciality service id"
        },
        "qualificationCode": {
          "type": "string",
          "description": "Kvalifikacijos kodas | Speciality code"
        },
        "qualificationName": {
          "type": "string",
          "description": "Kvalifikacijos pavadinimas | Speciality name"
        }
      },
      "title": "SpecialityService",
      "description": "Specialisto kvalifikacijos paslaugai modelis | Practitoner speciality service model"
    },
    "Workplace": {
      "type": "object",
      "required": [
        "medicalServiceCodes",
        "organizationId",
        "practitionerId",
        "qualificationCodes",
        "roomId"
      ],
      "properties": {
        "autoApproval": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Kiek valandų nuo registracijos pradžios automatiškai patvirtintinama registracija | Hours until registration is automatically approved"
        },
        "cid": {
          "type": "string",
          "description": "Vidinis darbo vietos Id | Internal workplace Id",
          "minLength": 0,
          "maxLength": 300
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Darbo vietos Id | Workplace Id"
        },
        "isPublished": {
          "type": "boolean",
          "description": "Ar darbo vietos talonai iš karto publikuojami | Are workplace slots instantly published"
        },
        "maxPatientsAtTheSameTime": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Maksimalus vienu metu priimamų pacientų skaičius | Maximum patients at one time",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "medicalServiceCodes": {
          "type": "array",
          "example": [
            447
          ],
          "description": "Medicininių paslaugų kodai | Medical service codes",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "needApproval": {
          "type": "boolean",
          "description": "Ar registracijos turi būti patvirtintos | Need to approve registrations"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 33,
          "description": "Įstaigos Id | Organization Id"
        },
        "practitionerId": {
          "type": "integer",
          "format": "int64",
          "example": 1000925843,
          "description": "Sveikatos specialisto Id | Practitioner Id"
        },
        "qualificationCodes": {
          "type": "array",
          "example": [
            "221101"
          ],
          "description": "Kvalifikacijų kodai | Qualification codes",
          "items": {
            "type": "string"
          }
        },
        "receptionId": {
          "type": "integer",
          "format": "int64",
          "description": "Registratūros Id | Reception Id"
        },
        "roomId": {
          "type": "integer",
          "format": "int64",
          "example": 1741,
          "description": "Kambario Id | Room Id"
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-08-16",
          "description": "Data nuo kurios galima naudoti šią darbo vietą | Date when workplace is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2100-01-01",
          "description": "Data iki kurios galima naudoti šią darbo vietą | Date until workplace is valid"
        },
        "workplaceDescription": {
          "type": "string",
          "example": "test",
          "description": "Darbo vietos aprašymas | Workplace description",
          "minLength": 0,
          "maxLength": 1000
        }
      },
      "title": "Workplace",
      "description": "Darbo vietos modelis | Workplace model"
    },
    "WorkplaceCreationRequest": {
      "type": "object",
      "required": [
        "organizationId",
        "practitionerId",
        "roomId"
      ],
      "properties": {
        "autoApproval": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Kiek valandų nuo registracijos pradžios automatiškai patvirtintinama registracija | Hours until registration is automatically approved"
        },
        "cid": {
          "type": "string",
          "description": "Vidinis darbo vietos Id | Internal workplace Id",
          "minLength": 0,
          "maxLength": 300
        },
        "isPublished": {
          "type": "boolean",
          "description": "Ar darbo vietos talonai iš karto publikuojami | Are workplace slots instantly published"
        },
        "maxPatientsAtTheSameTime": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Maksimalus vienu metu priimamų pacientų skaičius | Maximum patients at one time",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "needApproval": {
          "type": "boolean",
          "description": "Ar registracijos turi būti patvirtintos | Need to approve registrations"
        },
        "organizationId": {
          "type": "integer",
          "format": "int64",
          "example": 33,
          "description": "Įstaigos Id | Organization Id"
        },
        "practitionerId": {
          "type": "integer",
          "format": "int64",
          "example": 1000925843,
          "description": "Sveikatos specialisto Id | Practitioner Id"
        },
        "roomId": {
          "type": "integer",
          "format": "int64",
          "example": 1741,
          "description": "Kambario Id | Room Id"
        },
        "specialityServiceIds": {
          "type": "array",
          "example": [
            447
          ],
          "description": "Kvalifikacijų paslaugoms identifikatoriai | Specialty service identifiers",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-08-16",
          "description": "Data nuo kurios galima naudoti šią darbo vietą | Date when workplace is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2100-01-01",
          "description": "Data iki kurios galima naudoti šią darbo vietą | Date until workplace is valid"
        },
        "workplaceDescription": {
          "type": "string",
          "example": "test",
          "description": "Darbo vietos aprašymas | Workplace description",
          "minLength": 0,
          "maxLength": 1000
        }
      },
      "title": "WorkplaceCreationRequest",
      "description": "Darbo vietos sukūrimo užklausa | Workplace creation request"
    },
    "WorkplaceUpdateRequest": {
      "type": "object",
      "required": [
        "practitionerId",
        "roomId"
      ],
      "properties": {
        "autoApproval": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Kiek valandų nuo registracijos pradžios automatiškai patvirtintinama registracija | Hours until registration is automatically approved"
        },
        "isPublished": {
          "type": "boolean",
          "description": "Ar darbo vietos talonai iš karto publikuojami | Are workplace slots instantly published"
        },
        "maxPatientsAtTheSameTime": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Maksimalus vienu metu priimamų pacientų skaičius | Maximum patients at one time",
          "minimum": 1,
          "exclusiveMinimum": false
        },
        "needApproval": {
          "type": "boolean",
          "description": "Ar registracijos turi būti patvirtintos | Need to approve registrations"
        },
        "practitionerId": {
          "type": "integer",
          "format": "int64",
          "example": 1000925843,
          "description": "Sveikatos specialisto Id | Practitioner Id"
        },
        "roomId": {
          "type": "integer",
          "format": "int64",
          "example": 1741,
          "description": "Kambario Id | Room Id"
        },
        "specialityServiceIds": {
          "type": "array",
          "example": [
            447
          ],
          "description": "Kvalifikacijų paslaugoms identifikatoriai | Specialty service identifiers",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "validFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-08-16",
          "description": "Data nuo kurios galima naudoti šią darbo vietą | Date when workplace is valid from"
        },
        "validTill": {
          "type": "string",
          "format": "date",
          "example": "2100-01-01",
          "description": "Data iki kurios galima naudoti šią darbo vietą | Date until workplace is valid"
        },
        "workplaceDescription": {
          "type": "string",
          "example": "test",
          "description": "Darbo vietos aprašymas | Workplace description",
          "minLength": 0,
          "maxLength": 1000
        }
      },
      "title": "WorkplaceUpdateRequest",
      "description": "Darbo vietos atnaujinimo užklausa | Workplace update request"
    }
  }
}
